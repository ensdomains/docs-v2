(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[816],{5479:function(n,s,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/ensip/11",function(){return o(7354)}])},7354:function(n,s,o){"use strict";o.r(s),o.d(s,{__N_SSG:function(){return i}});var e=o(1527),a=o(313);function t(n){let s=Object.assign({h1:"h1",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",a:"a",tbody:"tbody",td:"td",h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,a.ah)(),n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(s.h1,{children:"ENSIP-11: EVM compatible Chain Address Resolution"}),"\n",(0,e.jsxs)(s.table,{children:[(0,e.jsx)(s.thead,{children:(0,e.jsxs)(s.tr,{children:[(0,e.jsx)(s.th,{children:(0,e.jsx)(s.strong,{children:"Author"})}),(0,e.jsxs)(s.th,{children:["Makoto Inoue <",(0,e.jsx)(s.a,{href:"mailto:makoto@ens.domains",children:"makoto@ens.domains"}),">"]})]})}),(0,e.jsxs)(s.tbody,{children:[(0,e.jsxs)(s.tr,{children:[(0,e.jsx)(s.td,{children:(0,e.jsx)(s.strong,{children:"Status"})}),(0,e.jsx)(s.td,{children:"Draft"})]}),(0,e.jsxs)(s.tr,{children:[(0,e.jsx)(s.td,{children:(0,e.jsx)(s.strong,{children:"Submitted"})}),(0,e.jsx)(s.td,{children:"2022-01-13"})]})]})]}),"\n",(0,e.jsx)(s.h2,{id:"abstract",children:"Abstract"}),"\n",(0,e.jsxs)(s.p,{children:["This ENSIP extends ",(0,e.jsx)(s.a,{href:"ensip-9-multichain-address-resolution.md",children:"ENSIP 9 (multichain address resolution)"}),", dedicates a range of coin types for EVM compatible chains, and specifies a way to derive EVM chain IDs to the designated coin types."]}),"\n",(0,e.jsx)(s.p,{children:"The dedicated range uses over 0x80000000 (2147483648) which is reserved under ENSIP 9 so there will be no possibility of coin type collision with other non EVM coin types to be added in future. However, some of coin types previously allocated to EVM chain ides will be deprecated."}),"\n",(0,e.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,e.jsxs)(s.p,{children:["The existing ENSIP 9 relies on the existence of coin types on ",(0,e.jsx)(s.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"SLIP44"})," which was designed to define address encoding type for deterministic wallets. As the majority of EVM compatible chains inherit the same encoding type as Ethereum, it is redundant to keep requesting the addition of EVM compatible chains into SLIP 44. This specification standardises a way to derive coinType based on ",(0,e.jsx)(s.a,{href:"https://chainlist.org",children:"Chain ID"}),"."]}),"\n",(0,e.jsx)(s.h2,{id:"specification",children:"Specification"}),"\n",(0,e.jsx)(s.p,{children:"This specification amends ENSIP 9 to specify that coin types with the most-significant bit set are to be treated as EVM chain IDs. The MSB is reserved in SLIP44 for other purposes relating to HD wallet key derivation, so no coin types exist in this range."}),"\n",(0,e.jsxs)(s.p,{children:["To compute the new coin type for EVM chains, bitwise-OR the chain ID with ",(0,e.jsx)(s.code,{children:"0x80000000"}),": ",(0,e.jsx)(s.code,{children:"0x80000000 | chainId"}),"."]}),"\n",(0,e.jsx)(s.pre,{language:"typescript",code:"export const convertEVMChainIdToCoinType = (chainId: number) =>{\n  return  (0x80000000 | chainId) >>> 0\n}\n",children:(0,e.jsx)(s.code,{className:"language-typescript",children:'<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">convertEVMChainIdToCoinType</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (chainId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">0x80000000</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> chainId) </span><span style="color: var(--shiki-token-keyword)">&gt;&gt;&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsxs)(s.p,{children:["And to reverse the operation, bitwise-AND the cointType with ",(0,e.jsx)(s.code,{children:"0x7fffffff"}),": ",(0,e.jsx)(s.code,{children:"0x7fffffff & coinType"}),"."]}),"\n",(0,e.jsx)(s.pre,{language:"typescript",code:"export const convertCoinTypeToEVMChainId = (coinType: number) =>{\n  return  (0x7fffffff & coinType) >> 0\n}\n",children:(0,e.jsx)(s.code,{className:"language-typescript",children:'<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">convertCoinTypeToEVMChainId</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (coinType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">0x7fffffff</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> coinType) </span><span style="color: var(--shiki-token-keyword)">&gt;&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(s.h3,{children:"Implementation"}),"\n",(0,e.jsxs)(s.p,{children:["An implementation of this interface is provided in the ",(0,e.jsx)(s.a,{href:"https://github.com/ensdomains/address-encoder/",children:"ensdomains/address-encoder"})," repository."]}),"\n",(0,e.jsx)(s.h3,{children:"Example"}),"\n",(0,e.jsxs)(s.p,{children:["To compute the new coin type for EVM chains, call ",(0,e.jsx)(s.code,{children:"convertEVMChainIdToCoinType(chainId)"})]}),"\n",(0,e.jsx)(s.pre,{language:"javascript",code:"const encoder = require('@ensdomains/address-encoder')\n>  encoder.convertEVMChainIdToCoinType(61)\n2147483709\n> encoder.convertCoinTypeToEVMChainId(2147483709)\n61\n",children:(0,e.jsx)(s.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">encoder</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@ensdomains/address-encoder&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">encoder</span><span style="color: var(--shiki-token-function)">.convertEVMChainIdToCoinType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">61</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">2147483709</span></span>\n<span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">encoder</span><span style="color: var(--shiki-token-function)">.convertCoinTypeToEVMChainId</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2147483709</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">61</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(s.p,{children:"You can also use existing functions formatsByName and formatsByCoinType to derive these chain IDs"}),"\n",(0,e.jsx)(s.pre,{language:"javascript",code:"> encoder.formatsByName['XDAI']\n{\n coinType: 2147483748,\n decoder: [Function (anonymous)],\n encoder: [Function (anonymous)],\n name: 'XDAI'\n}\n> encoder.formatsByCoinType[2147483748]\n{\n coinType: 2147483748,\n decoder: [Function (anonymous)],\n encoder: [Function (anonymous)],\n name: 'XDAI'\n}\n",children:(0,e.jsx)(s.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">encoder</span><span style="color: var(--shiki-color-text)">.formatsByName[</span><span style="color: var(--shiki-token-string-expression)">&#39;XDAI&#39;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)"> coinType</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2147483748</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)"> decoder</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-function)">Function</span><span style="color: var(--shiki-color-text)"> (anonymous)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)"> encoder</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-function)">Function</span><span style="color: var(--shiki-color-text)"> (anonymous)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;XDAI&#39;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">encoder</span><span style="color: var(--shiki-color-text)">.formatsByCoinType[</span><span style="color: var(--shiki-token-constant)">2147483748</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)"> coinType</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2147483748</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)"> decoder</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-function)">Function</span><span style="color: var(--shiki-color-text)"> (anonymous)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)"> encoder</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-function)">Function</span><span style="color: var(--shiki-color-text)"> (anonymous)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;XDAI&#39;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(s.h3,{children:"Exceptions"}),"\n",(0,e.jsx)(s.p,{children:"The following EVM chains are the exception to this standard."}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"AVAX = AVAX has multiple chain address formats, and only c chain is EVM compatible"}),"\n",(0,e.jsx)(s.li,{children:"RSK = RSK has its own additional validation"}),"\n"]}),"\n",(0,e.jsx)(s.p,{children:"They will continue using coinType defined at SLIP44"}),"\n",(0,e.jsx)(s.h3,{children:"Backwards Compatibility"}),"\n",(0,e.jsx)(s.p,{children:"The following EVM compatible cointypes existed before introducing this new standard."}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"NRG"}),"\n",(0,e.jsx)(s.li,{children:"POA"}),"\n",(0,e.jsx)(s.li,{children:"TT"}),"\n",(0,e.jsx)(s.li,{children:"CELO"}),"\n",(0,e.jsx)(s.li,{children:"CLO"}),"\n",(0,e.jsx)(s.li,{children:"TOMO"}),"\n",(0,e.jsx)(s.li,{children:"EWT"}),"\n",(0,e.jsx)(s.li,{children:"THETA"}),"\n",(0,e.jsx)(s.li,{children:"GO"}),"\n",(0,e.jsx)(s.li,{children:"FTM"}),"\n",(0,e.jsx)(s.li,{children:"XDAI"}),"\n",(0,e.jsx)(s.li,{children:"ETC"}),"\n"]}),"\n",(0,e.jsxs)(s.p,{children:["When you display them for backward compatibility purposes, append ",(0,e.jsx)(s.code,{children:"_LEGACY"})," to the cointype and make them read only."]}),"\n",(0,e.jsx)(s.h2,{id:"copyright",children:"Copyright"}),"\n",(0,e.jsxs)(s.p,{children:["Copyright and related rights waived via ",(0,e.jsx)(s.a,{href:"https://creativecommons.org/publicdomain/zero/1.0/",children:"CC0"}),"."]})]})}var i=!0;s.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,e.jsx)(s,Object.assign({},n,{children:(0,e.jsx)(t,n)})):t(n)}}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=5479)}),_N_E=n.O()}]);