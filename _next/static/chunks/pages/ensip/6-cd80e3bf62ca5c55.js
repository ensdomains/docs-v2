(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[839],{9654:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/ensip/6",function(){return r(5882)}])},5882:function(e,t,r){"use strict";r.r(t),r.d(t,{__N_SSG:function(){return i}});var s=r(1527),n=r(313);function o(e){let t=Object.assign({h1:"h1",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",h2:"h2",a:"a",h3:"h3",code:"code",ul:"ul",li:"li"},(0,n.ah)(),e.components),{Note:r}=t;return r||function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{children:"ENSIP-6: DNS-in-ENS"}),"\n",(0,s.jsx)(r,{children:(0,s.jsx)(t.p,{children:"This standard is obsolete, and does not reflect the current implementation."})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Author"})}),(0,s.jsx)(t.th,{children:"Jim McDonald (@mcdee)"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Status"})}),(0,s.jsx)(t.td,{children:"Stagnant"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Created"})}),(0,s.jsx)(t.td,{children:"2018-06-26"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"abstract",children:"Abstract"}),"\n",(0,s.jsx)(t.p,{children:"This ENSIP defines a resolver profile for ENS that provides features for storage and lookup of DNS records. This allows ENS to be used as a store of authoritative DNS information."}),"\n",(0,s.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,s.jsx)(t.p,{children:"ENS is a highly desirable store for DNS information. It provides the distributed authority of DNS without conflating ownership and authoritative serving of information. With ENS, the owner of a domain has full control over their own DNS records. Also, ENS has the ability (through smart contracts) for a domain's subdomains to be irrevocably assigned to another entity."}),"\n",(0,s.jsx)(t.h2,{id:"specification",children:"Specification"}),"\n",(0,s.jsx)(t.p,{children:"The resolver profile to support DNS on ENS follows the resolver specification as defined in #137."}),"\n",(0,s.jsxs)(t.p,{children:["Traditionally, DNS is a zone-based system in that all of the records for a zone are kept together in the same file. This has the benefit of simplicity and atomicity of zone updates, but when transposed to ENS can result in significant gas costs for simple changes. As a result, the resolver works on the basis of record sets. A record set is uniquely defined by the tuple (domain, name, resource record type), for example the tuple (example.com, ",(0,s.jsx)(t.a,{href:"http://www.example.com",children:"www.example.com"}),", A) defines the record set of A records for the name ",(0,s.jsx)(t.a,{href:"http://www.example.com",children:"www.example.com"})," in the domain example.com. A record set can contain 0 or more values, for example if ",(0,s.jsx)(t.a,{href:"http://www.example.com",children:"www.example.com"})," has A records 1.2.3.4 and 5.6.7.8 then the aforementioned tuple will have two values."]}),"\n",(0,s.jsx)(t.p,{children:"The choice to work at the level of record sets rather than zones means that this specification cannot completely support some features of DNS, such as zone transfers and DNSSEC. It would be possible to build a different resolver profile that works at the zone level, however it would be very expensive to carry out updates and so is not considered further for this ENSIP."}),"\n",(0,s.jsx)(t.p,{children:"The DNS resolver interface consists of two functions to set DNS information and two functions to query DNS information."}),"\n",(0,s.jsx)(t.h3,{children:"setDNSRecords(bytes32 node, bytes data)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"setDNSRecords()"})," sets, updates or clears 1 or more DNS records for a given node. It has function signature ",(0,s.jsx)(t.code,{children:"0x0af179d7"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The arguments for the function are as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"node: the namehash of the fully-qualified domain in ENS for which to set the records. Namehashes are defined in #137"}),"\n",(0,s.jsx)(t.li,{children:"data: 1 or more DNS records in DNS wire format. Any record that is supplied without a value will be cleared. Note that all records in the same RRset should be contiguous within the data; if not then the later RRsets will overwrite the earlier one(s)"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"clearDNSZone(bytes32 node)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"clearDNSZone()"})," removes all DNS records for the domain. It has function signature ",(0,s.jsx)(t.code,{children:"0xad5780af"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Although it is possible to clear records individually with ",(0,s.jsx)(t.code,{children:"setDNSRecords()"})," as described above this requires the owner to know all of the records that have been set (as the resolver has no methods to iterate over the records for a given domain), and might require multiple transactions. ",(0,s.jsx)(t.code,{children:"clearDNSZone()"})," removes all zone information in a single operation."]}),"\n",(0,s.jsx)(t.p,{children:"The arguments for the function is as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"node: the namehash of the fully-qualified domain in ENS for which to clear the records. Namehashes are defined in #137"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"dnsRecords(bytes32 node, bytes32 name, uint16 resource) view returns (bytes)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"dnsRecords()"})," obtains the DNS records for a given node, name and resource. It has function signature ",(0,s.jsx)(t.code,{children:"0x2461e851"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The arguments for the function are as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"node: the namehash of the fully-qualified domain in ENS for which to set the records. Namehashes are defined in #137"}),"\n",(0,s.jsxs)(t.li,{children:["name: the ",(0,s.jsx)(t.code,{children:"keccak256()"})," hash of the name of the record in DNS wire format."]}),"\n",(0,s.jsxs)(t.li,{children:["resource: the resource record ID. Resource record IDs are defined in ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/List%5C_of%5C_DNS%5C_record%5C_types",children:"https://en.wikipedia.org/wiki/List\\_of\\_DNS\\_record\\_types"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The function returns all matching records in DNS wire format. If there are no records present the function will return nothing."}),"\n",(0,s.jsx)(t.h3,{children:"hasDNSRecords(bytes32 node, bytes32 name) view returns (bool)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"hasDNSRecords()"})," reports if there are any records for the provided name in the domain. It has function signature ",(0,s.jsx)(t.code,{children:"0x4cbf6ba4"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["This function is needed by DNS resolvers when working with wildcard resources as defined in ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc4592",children:"https://tools.ietf.org/html/rfc4592"})]}),"\n",(0,s.jsx)(t.p,{children:"The arguments for the function are as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"node: the namehash of the fully-qualified domain in ENS for which to set the records. Namehashes are defined in #137"}),"\n",(0,s.jsxs)(t.li,{children:["name: the ",(0,s.jsx)(t.code,{children:"keccak256()"})," hash of the name of the record in DNS wire format."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The function returns ",(0,s.jsx)(t.code,{children:"true"})," if there are any records for the provided node and name, otherwise ",(0,s.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"backwards-compatibility",children:"Backwards compatibility"}),"\n",(0,s.jsx)(t.p,{children:"Not applicable."}),"\n",(0,s.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsxs)(t.p,{children:["The reference implementation of the DNS resolver is at ",(0,s.jsx)(t.a,{href:"https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/DNSResolver.sol",children:"https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/DNSResolver.sol"})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://github.com/wealdtech/ethereal.git",children:"https://github.com/wealdtech/ethereal.git"}),' can be used to test the functionality of the resolver with the "dns set", "dns get" and "dns clear" commands.']}),"\n",(0,s.jsx)(t.h2,{id:"test-cases",children:"Test Cases"}),"\n",(0,s.jsxs)(t.p,{children:["Test cases for the DNS resolver are at ",(0,s.jsx)(t.a,{href:"https://github.com/wealdtech/wealdtech-solidity/blob/master/test/ens/DNSResolver.js",children:"https://github.com/wealdtech/wealdtech-solidity/blob/master/test/ens/DNSResolver.js"})]}),"\n",(0,s.jsx)(t.h2,{id:"copyright",children:"Copyright"}),"\n",(0,s.jsxs)(t.p,{children:["Copyright and related rights waived via ",(0,s.jsx)(t.a,{href:"https://creativecommons.org/publicdomain/zero/1.0/",children:"CC0"}),"."]})]})}var i=!0;t.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(o,e)})):o(e)}}},function(e){e.O(0,[774,888,179],function(){return e(e.s=9654)}),_N_E=e.O()}]);