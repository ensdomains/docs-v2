(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6541],{2062:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/raw/deploying-ens-on-a-private-chain",function(){return n(8916)}])},8916:function(e,r,n){"use strict";n.r(r);var s=n(4637),t=n(6988),a=n(1177),o=n(9577),i=function(e){return(0,a.withSSG)((0,t.Z)({filename:"deploying-ens-on-a-private-chain.mdx",route:"/raw/deploying-ens-on-a-private-chain",meta:{},pageMap:[{name:"developer",children:[{name:"basics",route:"/developer/basics"},{name:"getting-started",route:"/developer/getting-started"},{name:"index",route:"/developer"},{name:"meta.json",meta:{index:{title:"Developer Documentation",type:"docs",theme:{}},"getting-started":{title:"Getting Started",type:"docs"},basics:{title:"Basics",type:"docs"},"working-directly-with-ens":{title:"Manual Contract API",type:"docs"}},locale:"en-US"},{name:"working-directly-with-ens",route:"/developer/working-directly-with-ens"}],route:"/developer"},{name:"governance",children:[{name:"index",route:"/governance"},{name:"meta.json",meta:{index:{title:"Governance Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/governance"},{name:"index",route:"/",frontMatter:{title:"Welcome"}},{name:"meta.json",meta:{index:{title:"Introduction",type:"docs",hidden:!0,theme:{}},about:{title:"About ENS",type:"docs",hidden:!0,theme:{}},user:{title:"User",type:"nav"},developer:{title:"Developer",type:"nav"},technical:{title:"Technical",type:"nav"},governance:{title:"Governance",type:"nav"},raw:{title:"Raw",type:"hidden"}},locale:"en-US"},{name:"raw",children:[{name:"SUMMARY",route:"/raw/SUMMARY"},{name:"bug-bounty-program",route:"/raw/bug-bounty-program"},{name:"contract-api-reference",children:[{name:"ENS-Contracts-Overview",route:"/raw/contract-api-reference/ENS-Contracts-Overview"},{name:"dns-registrar",route:"/raw/contract-api-reference/dns-registrar"},{name:"ens",route:"/raw/contract-api-reference/ens",frontMatter:{description:"The ENS registry."}},{name:"eth-permanent-registrar",children:[{name:"README",route:"/raw/contract-api-reference/eth-permanent-registrar/README"},{name:"controller",route:"/raw/contract-api-reference/eth-permanent-registrar/controller"},{name:"registrar",route:"/raw/contract-api-reference/eth-permanent-registrar/registrar"}],route:"/raw/contract-api-reference/eth-permanent-registrar"},{name:"name-processing",route:"/raw/contract-api-reference/name-processing",frontMatter:{description:"Describes how to normalize and hash ENS names."}},{name:"publicresolver",route:"/raw/contract-api-reference/publicresolver",frontMatter:{description:"The default public resolver."}},{name:"reverseregistrar",route:"/raw/contract-api-reference/reverseregistrar",frontMatter:{description:"The registrar responsible for managing reverse resolution via the .addr.reverse special-purpose TLD."}},{name:"testregistrar",route:"/raw/contract-api-reference/testregistrar"}],route:"/raw/contract-api-reference"},{name:"contract-developer-guide",children:[{name:"resolving-names-on-chain",route:"/raw/contract-developer-guide/resolving-names-on-chain"},{name:"writing-a-registrar",route:"/raw/contract-developer-guide/writing-a-registrar"},{name:"writing-a-resolver",route:"/raw/contract-developer-guide/writing-a-resolver"}],route:"/raw/contract-developer-guide"},{name:"dapp-developer-guide",children:[{name:"ens-as-nft",route:"/raw/dapp-developer-guide/ens-as-nft"},{name:"ens-l2-offchain",route:"/raw/dapp-developer-guide/ens-l2-offchain"},{name:"front-end-design-guidelines",route:"/raw/dapp-developer-guide/front-end-design-guidelines",frontMatter:{description:"ENS is a tool to simplify the experience for your users. Here are a series of guidelines and tools that will help you make design choices and implement the best ENS user experience."}},{name:"managing-names",route:"/raw/dapp-developer-guide/managing-names"},{name:"registering-and-renewing-names",route:"/raw/dapp-developer-guide/registering-and-renewing-names"},{name:"resolving-names",route:"/raw/dapp-developer-guide/resolving-names"}],route:"/raw/dapp-developer-guide"},{name:"deploying-ens-on-a-private-chain",route:"/raw/deploying-ens-on-a-private-chain"},{name:"dns-registrar-guide",route:"/raw/dns-registrar-guide"},{name:"ens-deployments",route:"/raw/ens-deployments"},{name:"ens-improvement-proposals",children:[{name:"README",route:"/raw/ens-improvement-proposals/README",frontMatter:{description:"Standards documentation describing the ENS protocol"}},{name:"ensip-1-ens",route:"/raw/ens-improvement-proposals/ensip-1-ens",frontMatter:{description:"Documentation of the basic ENS protocol (formerly EIP-137)."}},{name:"ensip-10-wildcard-resolution",route:"/raw/ens-improvement-proposals/ensip-10-wildcard-resolution",frontMatter:{description:"Provides a mechanism to support wildcard resolution of ENS names (formerly EIP-2544)."}},{name:"ensip-11-evmchain-address-resolution",route:"/raw/ens-improvement-proposals/ensip-11-evmchain-address-resolution",frontMatter:{description:"Introduces coinType for EVM compatible chains (amending ENSIP9)."}},{name:"ensip-12-avatar-text-records",route:"/raw/ens-improvement-proposals/ensip-12-avatar-text-records",frontMatter:{description:"A standard for storage of the avatar text record in ENS."}},{name:"ensip-2-initial-hash-registrar",route:"/raw/ens-improvement-proposals/ensip-2-initial-hash-registrar",frontMatter:{description:"Describes the hash registrar initially used to register ENS .eth domains (formerly EIP-162)."}},{name:"ensip-3-reverse-resolution",route:"/raw/ens-improvement-proposals/ensip-3-reverse-resolution",frontMatter:{description:"Specifies a TLD, registrar, and resolver interface for reverse resolution of Ethereum addresses using ENS (formerly EIP-181)."}},{name:"ensip-4-support-for-contract-abis",route:"/raw/ens-improvement-proposals/ensip-4-support-for-contract-abis",frontMatter:{description:"A mechanism for storing ABI definitions in ENS, for easy lookup of contract interfaces by callers (formerly EIP-205)."}},{name:"ensip-5-text-records",route:"/raw/ens-improvement-proposals/ensip-5-text-records",frontMatter:{description:"A standard for storage of text records in ENS (formerly EIP-634)."}},{name:"ensip-6-dns-in-ens",route:"/raw/ens-improvement-proposals/ensip-6-dns-in-ens",frontMatter:{description:"Defines a resolver profile for ENS that provides features for storage and lookup of DNS records (formerly EIP-1185)."}},{name:"ensip-7-contenthash-field",route:"/raw/ens-improvement-proposals/ensip-7-contenthash-field",frontMatter:{description:"Introduces a field for storing content addresses and hashes in ENS (formerly EIP-1577)."}},{name:"ensip-8-interface-discovery",route:"/raw/ens-improvement-proposals/ensip-8-interface-discovery",frontMatter:{description:"Defines a method of associating contract interfaces with ENS names and addresses, and of discovering those interfaces (formerly EIP-1844)."}},{name:"ensip-9-multichain-address-resolution",route:"/raw/ens-improvement-proposals/ensip-9-multichain-address-resolution",frontMatter:{description:"Introduces new overloads for the `addr` field for ENS resolvers, which permit resolution of addresses for other blockchains via ENS (formerly EIP-2304)."}}],route:"/raw/ens-improvement-proposals"},{name:"ens-migration-february-2020",children:[{name:"guide-for-dapp-developers",route:"/raw/ens-migration-february-2020/guide-for-dapp-developers"},{name:"technical-description",route:"/raw/ens-migration-february-2020/technical-description"}],route:"/raw/ens-migration-february-2020"},{name:"frequently-asked-questions",route:"/raw/frequently-asked-questions"},{name:"permanent-registrar-faq",route:"/raw/permanent-registrar-faq"},{name:"terminology",route:"/raw/terminology"}],route:"/raw"},{name:"technical",children:[{name:"about",route:"/technical/about"},{name:"index",route:"/technical"},{name:"meta.json",meta:{index:{title:"Technical Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/technical"},{name:"user",children:[{name:"index",route:"/user"},{name:"meta.json",meta:{index:{title:"User Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/user"}]},o.Z))(e)};function c(e){var r=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",code:"code",pre:"pre",h3:"h3"},e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{children:"Deploying ENS on a Private Chain"}),"\n",(0,s.jsxs)(r.p,{children:["If you'd like to deploy ENS on your own network, or deploy your own copy of ENS on a public network, this guide shows you how. If you want to use an existing ENS deployment, see ",(0,s.jsx)(r.a,{href:"dapp-developer-guide/resolving-names.md",children:"Resolving Names"}),", ",(0,s.jsx)(r.a,{href:"dapp-developer-guide/managing-names.md",children:"Managing Names"}),", and ",(0,s.jsx)(r.a,{href:"dapp-developer-guide/registering-and-renewing-names.md",children:"Registering & Renewing Names"})," instead."]}),"\n",(0,s.jsxs)(r.p,{children:["On this page we will use Javascript, Web3, and ",(0,s.jsx)(r.a,{href:"https://hardhat.org/",children:"Hardhat"})," with npm for simplicity. You will find a complete migration file example ",(0,s.jsx)(r.a,{href:"deploying-ens-on-a-private-chain.md#migration-file-example",children:"at the bottom of this page"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Please be aware that existing frameworks such as ",(0,s.jsx)(r.a,{href:"https://ethereum-waffle.readthedocs.io/en/latest/ens.html",children:"waffle"})," and ",(0,s.jsx)(r.a,{href:"https://framework.embarklabs.io/docs/naming_configuration.html",children:"embark"})," have support for local ENS deployment as well."]}),"\n",(0,s.jsx)(r.h2,{children:"Importing contracts"}),"\n",(0,s.jsxs)(r.p,{children:["The essential smart contracts are published ",(0,s.jsx)(r.a,{href:"https://www.npmjs.com/package/@ensdomains/ens-contracts",children:"as npm modules"}),". You can install them in your npm project with ",(0,s.jsx)(r.code,{children:"npm install @ensdomains/ens-contracts"}),". Now, you can require them in a migration script as follows (see the ",(0,s.jsx)(r.a,{href:"https://truffleframework.com/docs/truffle/getting-started/package-management-via-npm",children:"Truffle Documentation"})," on working with contract artifacts and npm for details)"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"import {\n  ENS, ENSRegistry, PublicResolver\n} from '@ensdomains/ens-contracts'\n"})}),"\n",(0,s.jsx)(r.p,{children:"Including them within your smart contract is as follows"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"import '@ensdomains/ens-contracts/contracts/registry/ENS.sol'\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"ENS"})," contains only an interface while ",(0,s.jsx)(r.code,{children:"ENSRegistry"})," includes the actual implementation."]}),"\n",(0,s.jsx)(r.h2,{children:"Deploy the Registry"}),"\n",(0,s.jsx)(r.p,{children:"The registry is ENS's central component and stores, among other things, who owns which domain. This is the example using ethers and hardhat."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const ENSRegistry = await ethers.getContractFactory("ENSRegistry")\nawait ENSRegistry.deploy()\n'})}),"\n",(0,s.jsx)(r.p,{children:"Once deployed, you will have a fresh ENS registry, whose root node is owned by the account that submitted the transaction. This account has total control over the ENS registry - it can create and replace any node in the entire tree."}),"\n",(0,s.jsxs)(r.p,{children:["From here, it's possible to create and manage names by directly interacting with the registry, as described in ",(0,s.jsx)(r.a,{href:"dapp-developer-guide/managing-names.md",children:"Managing Names"}),". However, you will probably want to ",(0,s.jsx)(r.a,{href:"deploying-ens-on-a-private-chain.md#deploy-a-resolver",children:"deploy a resolver"}),", and you may want to ",(0,s.jsx)(r.a,{href:"deploying-ens-on-a-private-chain.md#deploy-a-registrar",children:"deploy a registrar"})," so other users can register names."]}),"\n",(0,s.jsx)(r.h2,{children:"Deploy a Resolver"}),"\n",(0,s.jsx)(r.p,{children:"Records in the registry can point to resolver contracts which store additional domain information. The most common use-case is to store an address for a domain, but storing a contract ABI or text is also possible. For most purposes on private networks it's convenient to have an unrestricted general-purpose resolver available. Deploying one is straightforward:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";\nconst ENSRegistry = await ethers.getContractFactory("ENSRegistry")\nconst registry = await ENSRegistry.deploy()\nawait registry.deployed()\nconst PublicResolver = await ethers.getContractFactory("PublicResolver")\nconst resolver = await PublicResolver.deploy(registry.address, ZERO_ADDRESS);\nawait resolver.deployed()\n'})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/ens-contracts/blob/master/contracts/resolvers/PublicResolver.sol",children:(0,s.jsx)(r.code,{children:"PublicResolver"})})," looks up ownership in the registry, which is why the registry's address is required at deployment."]}),"\n",(0,s.jsx)(r.p,{children:"For ease of use, we can give this resolver a name:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const ethers = require(\'ethers\');\nconst utils = ethers.utils;\nconst labelhash = (label) => utils.keccak256(utils.toUtf8Bytes(label))\nconst namehash = require(\'eth-ens-namehash\');\n\nasync function setupResolver(ens, resolver, accounts) {\n  const resolverNode = namehash.hash("resolver");\n  const resolverLabel = labelhash("resolver");\n\n  await ens.setSubnodeOwner("0x0000000000000000000000000000000000000000", resolverLabel, accounts[0]);\n  await ens.setResolver(resolverNode, resolver.address);\n  await resolver.setAddr(resolverNode, resolver.address);\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:['Above, we first create a new top-level domain, "resolver", then set its resolver address to our newly deployed public resolver. Finally, we set up an address record for "resolver", pointing back to the resolver address. In effect, the resolver is answering queries about its own address. After this, anyone can find the public resolver at the special ENS name "resolver". We call this function after deploying the public resolver in a ',(0,s.jsx)(r.code,{children:".then()"})," block as we did with the resolver."]}),"\n",(0,s.jsx)(r.h2,{children:"Deploy a Registrar"}),"\n",(0,s.jsxs)(r.p,{children:['So far, domains can only be registered manually by the owner of the registry\'s root node. Fortunately, contracts can also own nodes. This means we can set up a registrar contract as the owner of a node, e.g. "test", in the registry which enables it to distribute subdomains such as "mycontract.test". It allows us to have custom, on-chain logic which governs domain allocation. Once we own a (sub-)node we are free to repeat this process and set up another registrar. If you are part of the "myorg" organisation you could register "myorg.test" and let it point to your custom registrar which only allows certified members of your organisation to claim subdomains such as "bob.myorg.test". For our private network, we\'ll use the simple \'first come, first served\' ',(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/ens/blob/master/contracts/FIFSRegistrar.sol",children:"FIFSRegistrar"}),', and set it as the owner of the top-level domain "test" in our migration script:']}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'...\n  const registrar = await FIFSRegistrar.deploy(ens.address, namehash.hash("test"));\n  await registrar.deployed();\n  await ens.setSubnodeOwner("0x0000000000000000000000000000000000000000", sha3("test"), registrar.address);\n})\n...\n'})}),"\n",(0,s.jsx)(r.h2,{children:"Deploy the Reverse Registrar"}),"\n",(0,s.jsx)(r.p,{children:"Similarly, if you wish to enable reverse resolution on your deployment, you will need to deploy the reverse registrar:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'...\nconst reverseRegistrar = await ReverseRegistrar.deploy(ens.address, resolver.address);\nawait reverseRegistrar.deployed();\nsetupReverseRegistrar(ens, resolver, reverseRegistrar, accounts);\n...\n\nasync function setupReverseRegistrar(ens, resolver, reverseRegistrar, accounts) {\n  await ens.setSubnodeOwner("0x0000000000000000000000000000000000000000", utils.sha3("reverse"), accounts[0]);\n  await ens.setSubnodeOwner(namehash.hash("reverse"), utils.sha3("addr"), reverseRegistrar.address);\n}\n'})}),"\n",(0,s.jsx)(r.h2,{children:"Migration File Example"}),"\n",(0,s.jsx)(r.p,{children:"We can combine the steps above in a single hardhat migration file. This allows us to deploy ENS in one go:"}),"\n",(0,s.jsx)(r.h3,{children:"contracts/deps.sol"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-text",children:'//SPDX-License-Identifier: MIT\n// These imports are here to force Hardhat to compile contracts we depend on in our tests but don\'t need anywhere else.\nimport "@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol";\nimport "@ensdomains/ens-contracts/contracts/registry/FIFSRegistrar.sol";\nimport "@ensdomains/ens-contracts/contracts/resolvers/PublicResolver.sol";\n'})}),"\n",(0,s.jsx)(r.h3,{children:"script/deploy.js"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const hre = require("hardhat");\nconst namehash = require(\'eth-ens-namehash\');\nconst tld = "test";\nconst ethers = hre.ethers;\nconst utils = ethers.utils;\nconst labelhash = (label) => utils.keccak256(utils.toUtf8Bytes(label))\nconst ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";\nconst ZERO_HASH = "0x0000000000000000000000000000000000000000000000000000000000000000";\nasync function main() {\n  const ENSRegistry = await ethers.getContractFactory("ENSRegistry")\n  const FIFSRegistrar = await ethers.getContractFactory("FIFSRegistrar")\n  const ReverseRegistrar = await ethers.getContractFactory("ReverseRegistrar")\n  const PublicResolver = await ethers.getContractFactory("PublicResolver")\n  const signers = await ethers.getSigners();\n  const accounts = signers.map(s => s.address)\n\n  const ens = await ENSRegistry.deploy()\n  await ens.deployed()\n  const resolver = await PublicResolver.deploy(ens.address, ZERO_ADDRESS);\n  await resolver.deployed()\n  await setupResolver(ens, resolver, accounts)\n  const registrar = await  FIFSRegistrar.deploy(ens.address, namehash.hash(tld));\n  await registrar.deployed()\n  await setupRegistrar(ens, registrar);\n  const reverseRegistrar = await ReverseRegistrar.deploy(ens.address, resolver.address);\n  await reverseRegistrar.deployed()\n  await setupReverseRegistrar(ens, registrar, reverseRegistrar, accounts);\n};\n\nasync function setupResolver(ens, resolver, accounts) {\n  const resolverNode = namehash.hash("resolver");\n  const resolverLabel = labelhash("resolver");\n  await ens.setSubnodeOwner(ZERO_HASH, resolverLabel, accounts[0]);\n  await ens.setResolver(resolverNode, resolver.address);\n  await resolver[\'setAddr(bytes32,address)\'](resolverNode, resolver.address);\n}\n\nasync function setupRegistrar(ens, registrar) {\n  await ens.setSubnodeOwner(ZERO_HASH, labelhash(tld), registrar.address);\n}\n\nasync function setupReverseRegistrar(ens, registrar, reverseRegistrar, accounts) {\n  await ens.setSubnodeOwner(ZERO_HASH, labelhash("reverse"), accounts[0]);\n  await ens.setSubnodeOwner(namehash.hash("reverse"), labelhash("addr"), reverseRegistrar.address);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n'})}),"\n",(0,s.jsx)(r.p,{children:"To execute the migration file on hardhat, run the following command line."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-text",children:"npx hardhat run scripts/deploy.js\n"})}),"\n",(0,s.jsx)(r.h3,{children:"Deploying ENS in a single transaction"}),"\n",(0,s.jsx)(r.p,{children:"Alternately you may wish to deploy a test registrar and its dependencies with a single transaction. This is useful for example in unit tests where you wish to start from a clean slate in each test. In many cases it will also be faster than sending a series of separate transactions."}),"\n",(0,s.jsx)(r.p,{children:"This can be done by deploying a new contract that creates and sets up all the other contracts in its constructor. The below code creates all the ENS contracts and assigns the eth TLD to the FIFS Registrar so that any eth domain may be registered in the unit tests."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-text",children:"pragma solidity >=0.8.4;\nimport {INameWrapper, PublicResolver} from '@ensdomains/ens-contracts/contracts/resolvers/PublicResolver.sol';\nimport '@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol';\nimport '@ensdomains/ens-contracts/contracts/registry/FIFSRegistrar.sol';\nimport {NameResolver, ReverseRegistrar} from '@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol';\n\n// Construct a set of test ENS contracts.\ncontract ENSDeployer {\n  bytes32 public constant TLD_LABEL = keccak256('eth');\n  bytes32 public constant RESOLVER_LABEL = keccak256('resolver');\n  bytes32 public constant REVERSE_REGISTRAR_LABEL = keccak256('reverse');\n  bytes32 public constant ADDR_LABEL = keccak256('addr');\n\n  ENSRegistry public ens;\n  FIFSRegistrar public fifsRegistrar;\n  ReverseRegistrar public reverseRegistrar;\n  PublicResolver public publicResolver;\n\n  function namehash(bytes32 node, bytes32 label) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(node, label));\n  }\n\n  constructor() public {\n    ens = new ENSRegistry();\n    publicResolver = new PublicResolver(ens, INameWrapper(address(0)));\n\n    // Set up the resolver\n    bytes32 resolverNode = namehash(bytes32(0), RESOLVER_LABEL);\n\n    ens.setSubnodeOwner(bytes32(0), RESOLVER_LABEL, address(this));\n    ens.setResolver(resolverNode, address(publicResolver));\n    publicResolver.setAddr(resolverNode, address(publicResolver));\n\n    // Create a FIFS registrar for the TLD\n    fifsRegistrar = new FIFSRegistrar(ens, namehash(bytes32(0), TLD_LABEL));\n\n    ens.setSubnodeOwner(bytes32(0), TLD_LABEL, address(fifsRegistrar));\n\n    // Construct a new reverse registrar and point it at the public resolver\n    reverseRegistrar = new ReverseRegistrar(\n      ens,\n      NameResolver(address(publicResolver))\n    );\n\n    // Set up the reverse registrar\n    ens.setSubnodeOwner(bytes32(0), REVERSE_REGISTRAR_LABEL, address(this));\n    ens.setSubnodeOwner(\n      namehash(bytes32(0), REVERSE_REGISTRAR_LABEL),\n      ADDR_LABEL,\n      address(reverseRegistrar)\n    );\n  }\n}\n"})})]})}r.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(i,Object.assign({},e,{children:(0,s.jsx)(c,e)}))}}},function(e){e.O(0,[4698,9214,9774,2888,179],(function(){return r=2062,e(e.s=r);var r}));var r=e.O();_N_E=r}]);