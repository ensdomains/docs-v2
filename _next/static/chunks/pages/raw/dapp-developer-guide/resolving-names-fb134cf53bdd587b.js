(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5505],{5696:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/raw/dapp-developer-guide/resolving-names",function(){return n(6386)}])},2638:function(e,r,n){"use strict";n.d(r,{O:function(){return d},m:function(){return i}});var s=n(4637),t=n(9803),a=n.n(t),o=n(9496),i=function(e){var r=e.children,n=Array.isArray(r)?r:[r],t=(0,o.useState)(n.at(0).props.title),i=t[0],d=t[1];return(0,s.jsxs)("div",{className:"mt-4",children:[(0,s.jsx)("div",{className:"flex w-fit border-l border-l-ensl-border",style:{marginBottom:"-1px"},children:n.map((function(e,r){return(0,s.jsx)("button",{className:a()("p-2 pb-4 border-r border-t border-b",e.props.title==i?"bg-white border-ensl-border border-b-ensl-background border-b z-10":"bg-ensl-backgroundSecondary border-ensl-border hover:brightness-105"),onClick:function(){return d(e.props.title)},children:e.props.title},r)}))}),(0,s.jsx)("div",{className:"border border-ensl-border bg-ensl-background px-6",children:n.map((function(e,r){return(0,s.jsx)("div",{className:a()(i==e.props.title?"":"hidden"),children:e},r)}))})]})},d=function(e){e.title;var r=e.children;return(0,s.jsx)("div",{children:r})}},8965:function(e,r,n){"use strict";n.d(r,{zx:function(){return s.zx},UW:function(){return o},OK:function(){return i.O},mQ:function(){return i.m}});var s=n(105),t=n(4637),a=(n(9496),{default:"bg-ensl-accent dark:bg-ensd-accent bg-opacity-10 dark:bg-opacity-10 text-ensl-accent dark:text-ensw-accent dark:bg-ensd-accent",yellow:"bg-orange-100 text-orange-800 dark:text-orange-300 dark:bg-orange-200 dark:bg-opacity-10",error:"bg-red-200 text-red-900 dark:text-red-200 dark:bg-red-600 dark:bg-opacity-30",warning:"bg-yellow-200 text-yellow-900 dark:text-yellow-200 dark:bg-yellow-700 dark:bg-opacity-30"}),o=function(e){var r=e.children,n=e.type,s=void 0===n?"default":n,o=e.emoji,i=void 0===o?"\ud83d\udca1":o;return(0,t.jsxs)("div",{className:"".concat(a[s]," flex rounded-lg callout mt-6"),children:[(0,t.jsx)("div",{className:"pl-6 pr-2 py-6 select-none text-xl",style:{fontFamily:'"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"'},children:i}),(0,t.jsx)("div",{className:"pr-4 pl-2 py-6 noheadpats",children:r})]})},i=n(2638)},6386:function(e,r,n){"use strict";n.r(r);var s=n(4637),t=n(6988),a=n(1177),o=n(9577),i=n(8965),d=function(e){return(0,a.withSSG)((0,t.Z)({filename:"resolving-names.mdx",route:"/raw/dapp-developer-guide/resolving-names",meta:{},pageMap:[{name:"developer",children:[{name:"basics",route:"/developer/basics"},{name:"getting-started",route:"/developer/getting-started"},{name:"index",route:"/developer"},{name:"meta.json",meta:{index:{title:"Developer Documentation",type:"docs",theme:{}},"getting-started":{title:"Getting Started",type:"docs"},basics:{title:"Basics",type:"docs"},"working-directly-with-ens":{title:"Manual Contract API",type:"docs"}},locale:"en-US"},{name:"working-directly-with-ens",route:"/developer/working-directly-with-ens"}],route:"/developer"},{name:"governance",children:[{name:"index",route:"/governance"},{name:"meta.json",meta:{index:{title:"Governance Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/governance"},{name:"index",route:"/",frontMatter:{title:"Welcome"}},{name:"meta.json",meta:{index:{title:"Introduction",type:"docs",hidden:!0,theme:{}},about:{title:"About ENS",type:"docs",hidden:!0,theme:{}},user:{title:"User",type:"nav"},developer:{title:"Developer",type:"nav"},technical:{title:"Technical",type:"nav"},governance:{title:"Governance",type:"nav"},raw:{title:"Raw",type:"hidden"}},locale:"en-US"},{name:"raw",children:[{name:"SUMMARY",route:"/raw/SUMMARY"},{name:"bug-bounty-program",route:"/raw/bug-bounty-program"},{name:"contract-api-reference",children:[{name:"ENS-Contracts-Overview",route:"/raw/contract-api-reference/ENS-Contracts-Overview"},{name:"dns-registrar",route:"/raw/contract-api-reference/dns-registrar"},{name:"ens",route:"/raw/contract-api-reference/ens",frontMatter:{description:"The ENS registry."}},{name:"eth-permanent-registrar",children:[{name:"README",route:"/raw/contract-api-reference/eth-permanent-registrar/README"},{name:"controller",route:"/raw/contract-api-reference/eth-permanent-registrar/controller"},{name:"registrar",route:"/raw/contract-api-reference/eth-permanent-registrar/registrar"}],route:"/raw/contract-api-reference/eth-permanent-registrar"},{name:"name-processing",route:"/raw/contract-api-reference/name-processing",frontMatter:{description:"Describes how to normalize and hash ENS names."}},{name:"publicresolver",route:"/raw/contract-api-reference/publicresolver",frontMatter:{description:"The default public resolver."}},{name:"reverseregistrar",route:"/raw/contract-api-reference/reverseregistrar",frontMatter:{description:"The registrar responsible for managing reverse resolution via the .addr.reverse special-purpose TLD."}},{name:"testregistrar",route:"/raw/contract-api-reference/testregistrar"}],route:"/raw/contract-api-reference"},{name:"contract-developer-guide",children:[{name:"resolving-names-on-chain",route:"/raw/contract-developer-guide/resolving-names-on-chain"},{name:"writing-a-registrar",route:"/raw/contract-developer-guide/writing-a-registrar"},{name:"writing-a-resolver",route:"/raw/contract-developer-guide/writing-a-resolver"}],route:"/raw/contract-developer-guide"},{name:"dapp-developer-guide",children:[{name:"ens-as-nft",route:"/raw/dapp-developer-guide/ens-as-nft"},{name:"ens-l2-offchain",route:"/raw/dapp-developer-guide/ens-l2-offchain"},{name:"front-end-design-guidelines",route:"/raw/dapp-developer-guide/front-end-design-guidelines",frontMatter:{description:"ENS is a tool to simplify the experience for your users. Here are a series of guidelines and tools that will help you make design choices and implement the best ENS user experience."}},{name:"managing-names",route:"/raw/dapp-developer-guide/managing-names"},{name:"registering-and-renewing-names",route:"/raw/dapp-developer-guide/registering-and-renewing-names"},{name:"resolving-names",route:"/raw/dapp-developer-guide/resolving-names"}],route:"/raw/dapp-developer-guide"},{name:"deploying-ens-on-a-private-chain",route:"/raw/deploying-ens-on-a-private-chain"},{name:"dns-registrar-guide",route:"/raw/dns-registrar-guide"},{name:"ens-deployments",route:"/raw/ens-deployments"},{name:"ens-improvement-proposals",children:[{name:"README",route:"/raw/ens-improvement-proposals/README",frontMatter:{description:"Standards documentation describing the ENS protocol"}},{name:"ensip-1-ens",route:"/raw/ens-improvement-proposals/ensip-1-ens",frontMatter:{description:"Documentation of the basic ENS protocol (formerly EIP-137)."}},{name:"ensip-10-wildcard-resolution",route:"/raw/ens-improvement-proposals/ensip-10-wildcard-resolution",frontMatter:{description:"Provides a mechanism to support wildcard resolution of ENS names (formerly EIP-2544)."}},{name:"ensip-11-evmchain-address-resolution",route:"/raw/ens-improvement-proposals/ensip-11-evmchain-address-resolution",frontMatter:{description:"Introduces coinType for EVM compatible chains (amending ENSIP9)."}},{name:"ensip-12-avatar-text-records",route:"/raw/ens-improvement-proposals/ensip-12-avatar-text-records",frontMatter:{description:"A standard for storage of the avatar text record in ENS."}},{name:"ensip-2-initial-hash-registrar",route:"/raw/ens-improvement-proposals/ensip-2-initial-hash-registrar",frontMatter:{description:"Describes the hash registrar initially used to register ENS .eth domains (formerly EIP-162)."}},{name:"ensip-3-reverse-resolution",route:"/raw/ens-improvement-proposals/ensip-3-reverse-resolution",frontMatter:{description:"Specifies a TLD, registrar, and resolver interface for reverse resolution of Ethereum addresses using ENS (formerly EIP-181)."}},{name:"ensip-4-support-for-contract-abis",route:"/raw/ens-improvement-proposals/ensip-4-support-for-contract-abis",frontMatter:{description:"A mechanism for storing ABI definitions in ENS, for easy lookup of contract interfaces by callers (formerly EIP-205)."}},{name:"ensip-5-text-records",route:"/raw/ens-improvement-proposals/ensip-5-text-records",frontMatter:{description:"A standard for storage of text records in ENS (formerly EIP-634)."}},{name:"ensip-6-dns-in-ens",route:"/raw/ens-improvement-proposals/ensip-6-dns-in-ens",frontMatter:{description:"Defines a resolver profile for ENS that provides features for storage and lookup of DNS records (formerly EIP-1185)."}},{name:"ensip-7-contenthash-field",route:"/raw/ens-improvement-proposals/ensip-7-contenthash-field",frontMatter:{description:"Introduces a field for storing content addresses and hashes in ENS (formerly EIP-1577)."}},{name:"ensip-8-interface-discovery",route:"/raw/ens-improvement-proposals/ensip-8-interface-discovery",frontMatter:{description:"Defines a method of associating contract interfaces with ENS names and addresses, and of discovering those interfaces (formerly EIP-1844)."}},{name:"ensip-9-multichain-address-resolution",route:"/raw/ens-improvement-proposals/ensip-9-multichain-address-resolution",frontMatter:{description:"Introduces new overloads for the `addr` field for ENS resolvers, which permit resolution of addresses for other blockchains via ENS (formerly EIP-2304)."}}],route:"/raw/ens-improvement-proposals"},{name:"ens-migration-february-2020",children:[{name:"guide-for-dapp-developers",route:"/raw/ens-migration-february-2020/guide-for-dapp-developers"},{name:"technical-description",route:"/raw/ens-migration-february-2020/technical-description"}],route:"/raw/ens-migration-february-2020"},{name:"frequently-asked-questions",route:"/raw/frequently-asked-questions"},{name:"permanent-registrar-faq",route:"/raw/permanent-registrar-faq"},{name:"terminology",route:"/raw/terminology"}],route:"/raw"},{name:"technical",children:[{name:"about",route:"/technical/about"},{name:"index",route:"/technical"},{name:"meta.json",meta:{index:{title:"Technical Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/technical"},{name:"user",children:[{name:"index",route:"/user"},{name:"meta.json",meta:{index:{title:"User Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/user"}]},o.Z))(e)};function c(e){var r=Object.assign({h1:"h1",p:"p",strong:"strong",h2:"h2",pre:"pre",code:"code",ol:"ol",li:"li",a:"a",h3:"h3",em:"em"},e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{children:"Resolving Names"}),"\n",(0,s.jsxs)(r.p,{children:["The ENS namespace includes both .eth names (which are native to ENS) and DNS names imported into ENS. Because the DNS suffix namespace expands over time, a hardcoded list of name suffixes for recognizing ENS names will regularly be out of date, leading to your application not recognizing all valid ENS names. To remain future-proof, ",(0,s.jsx)(r.strong,{children:"a correct integration of ENS treats any dot-separated name as a potential ENS name and will attempt a look-up"}),"."]}),"\n",(0,s.jsx)(r.h2,{children:"Looking up cryptocurrency addresses"}),"\n",(0,s.jsx)(r.p,{children:"Names can have many types of data associated with them; the most common is cryptocurrency addresses. ENS supports storing and resolving the addresses of any arbitrary blockchain."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Resolving a name to an Ethereum address"})," using a library is simple:"]}),"\n",(0,s.jsxs)(i.mQ,{children:[(0,s.jsx)(i.OK,{title:"ensjs",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var address = await ens.name('resolver.eth').getAddress();\n"})})}),(0,s.jsx)(i.OK,{title:"web3.js",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var address = ens.getAddress('alice.eth');\n"})})}),(0,s.jsx)(i.OK,{title:"ethjs-ens",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var address = await ens.lookup('alice.eth');\n"})})}),(0,s.jsxs)(i.OK,{title:"ethers.js",children:[(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var address = await provider.resolveName('alice.eth');\n"})}),(0,s.jsxs)(r.p,{children:["ethers.js also supports using ENS names anywhere you would use an address, meaning you often do not need to directly call ",(0,s.jsx)(r.code,{children:"resolveName"}),". For example, to look up an account's balance, you can do:"]}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var balance = await provider.getBalance('alice.eth');\n"})}),(0,s.jsx)(r.p,{children:"Or, to instantiate a contract:"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const abi = [\n  "function getValue() view returns (string value)",\n  "function setValue(string value)"\n];\nconst contract = new ethers.Contract(\'contract.alice.eth\', abi, provider);\n'})})]}),(0,s.jsx)(i.OK,{title:"go-ens",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'address, err := ens.Resolve(client, "alice.eth")\n'})})}),(0,s.jsx)(i.OK,{title:"web3.py",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"address = ns.address('alice.eth')\n"})})}),(0,s.jsxs)(i.OK,{title:"web3j",children:[(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:'String address = ens.resolve("alice.eth");\n'})}),(0,s.jsxs)(r.p,{children:["web3j also supports using ENS names anywhere you would use an address, meaning you often do not need to directly interact with the ",(0,s.jsx)(r.code,{children:"EnsResolver"})," object. For example, to instantiate a contract interface, you can do:"]}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:'YourSmartContract contract = YourSmartContract.load(\n        "contract.alice.eth", web3j, credentials, GAS_PRICE, GAS_LIMIT);\n'})})]})]}),"\n",(0,s.jsx)(r.p,{children:"Resolution without a library is a three step process:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["Normalise and hash the name - see ",(0,s.jsx)(r.a,{href:"../contract-api-reference/name-processing.md",children:"name processing"})," for details."]}),"\n",(0,s.jsxs)(r.li,{children:["Call ",(0,s.jsx)(r.code,{children:"resolver()"})," on the ENS registry, passing in the output of step 1. This returns the address of the resolver responsible for the name."]}),"\n",(0,s.jsxs)(r.li,{children:["Using the ",(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/resolvers/blob/master/contracts/Resolver.sol",children:"resolver interface"}),", call ",(0,s.jsx)(r.code,{children:"addr()"})," on the resolver address returned in step 2, passing in the hashed name calculated in step 1."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Resolution support for the addresses of other blockchains"})," is implemented with an additional overload on ",(0,s.jsx)(r.code,{children:"addr()"}),". To resolve a non-Ethereum address, supply both the namehash and the ",(0,s.jsx)(r.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"SLIP44"})," chain ID of the cryptocurrency whose address you want to resolve. For example, to resolve a Bitcoin address, you would call ",(0,s.jsx)(r.code,{children:"addr(hash, 0)"}),". Note that the returned address will be in binary representation, and so will need decoding to a text-format address; for details, see ",(0,s.jsx)(r.a,{href:"https://eips.ethereum.org/EIPS/eip-2304",children:"EIP 2304"}),"."]}),"\n",(0,s.jsx)(i.UW,{type:"warning",emoji:"\u26a0\ufe0f",children:(0,s.jsx)(r.p,{children:"If you are resolving addr() records, you MUST treat a return value from the resolver of 0x00\u202600 as that record being unset. Failing to do so could result in users accidentally sending funds to the null address if they have configured a resolver in ENS, but not set the resolver record!"})}),"\n",(0,s.jsx)(r.h2,{children:"Looking up other resources"}),"\n",(0,s.jsx)(r.p,{children:"ENS supports many types of resources besides Ethereum addresses, including other cryptocurrency addresses, content hashes (hashes for IPFS, Skynet, and Swarm, and Tor .onion addresses), contract interfaces (ABIs), and text-based metadata. The process for looking these up varies from library to library; for specific details see your chosen library's documentation."}),"\n",(0,s.jsxs)(r.p,{children:["Resolving these content types without a library follows the same 3-step process detailed above; simply call the relevant method on the resolver in step 3 instead of ",(0,s.jsx)(r.code,{children:"addr()"}),"."]}),"\n",(0,s.jsxs)(i.mQ,{children:[(0,s.jsx)(i.OK,{title:"ensjs",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// Getting contenthash\nawait ens.name('abittooawesome.eth').getContent()\n// Setting contenthash\nawait ens.name('abittooawesome.eth').setContenthash(contentHash)\n\n// Getting other coins\nawait ens.name('brantly.eth').getAddress('BTC')\n// Setting other coins\nawait ens.name('superawesome.eth').setAddress('ETC', '0x0000000000000000000000000000000000012345')\n// Getting text\nawait ens.name('resolver.eth').getText('url')\n// Setting text\nawait ens.name('superawesome.eth').setText('url', 'http://google.com')\n"})})}),(0,s.jsx)(i.OK,{title:"web3.js",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"// Getting contenthash\nweb3.eth.ens.getContenthash('ethereum.eth').then(function (result) {\n    console.log(result);\n});\n// Setting contenthash\nweb3.eth.ens.setContenthash('ethereum.eth', hash);\n"})})}),(0,s.jsx)(i.OK,{title:"ethjs-ens",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"Not supported.\n"})})}),(0,s.jsx)(i.OK,{title:"ethers.js",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"  const resolver = await provider.getResolver('abittooawesome.eth');\n  const contentHash = await resolver.getContentHash();\n  const btcAddress = await resolver.getAddress(0);\n  const dogeAddress = await resolver.getAddress(3);\n  const email = await resolver.getText(\"email\");\n"})})}),(0,s.jsx)(i.OK,{title:"go-ens",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Encoding\nbin, err := ens.StringToContenthash("/ipfs/QmayQq2DWCkY3d4x3xKh4suohuRPEXe2fBqMBam5xtDj3t")\n// Setting contenthash\nresolver.SetContenthash(opts, data)\n// Getting contenthash\nresolver.Contenthash()\n// Decoding\nrepr, err := ens.ContenthashToString(bin)\n\n// Getting Multicoin\nbtcAddress, err := resolver.MultiAddress(0)\n// Setting Multicoin\nresolver.SetMultiAddress(opts, address)\n\n// Setting text\nresolver.SetText(opts, name, value)\n// Getting text\nresolver.Text(name)\n'})})}),(0,s.jsx)(i.OK,{title:"web3.py",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-raw",children:"Not supported.\n"})})}),(0,s.jsx)(i.OK,{title:"web3j",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:"Not supported.\n"})})})]}),"\n",(0,s.jsx)(r.h3,{children:"Encoding and decoding contenthash"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"contenthash"})," is used to store IPFSand Swarm content hashes, which permit resolving ENS addresses to distributed content (eg, websites) hosted on these distributed networks. ",(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/content-hash",children:"content-hash"})," javascript library provides a convenient way to encode/decode these hashes."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:" const contentHash = require('content-hash')\nconst encoded = 'e3010170122029f2d17be6139079dc48696d1f582a8530eb9805b561eda517e22a892c7e3f1f'\nconst content = contentHash.decode(encoded)\n// 'QmRAQB6YaCyidP37UdDnjFY5vQuiBrcqdyoW1CuDgwxkD4'\n\nconst onion = 'zqktlwi4fecvo6ri'\ncontentHash.encode('onion', onion);\n// 'bc037a716b746c776934666563766f367269'\n\nconst encoded = 'e40101701b20d1de9994b4d039f6548d191eb26786769f580809256b4685ef316805265ea162'\n\nconst codec = contentHash.getCodec(encoded) // 'swarm-ns'\ncodec === 'ipfs-ns' // false\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Note for ipns: For security reasons, the encoding of ipns is only allowed for ",(0,s.jsx)(r.code,{children:"libp2p-key"})," codec. Decoding with other formats will show a deprecation warning. Please read ",(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/content-hash/pull/5",children:"here"})," for more detail."]}),"\n",(0,s.jsx)(r.h3,{children:"Coin type and encoding/decoding"}),"\n",(0,s.jsxs)(r.p,{children:["While some libraries allow you to query cryptocurrency addresses via their symbol (e.g.: ",(0,s.jsx)(r.code,{children:"BTC"}),"), others do not have the built-in support, and you have to call via each coin id (e.g.: ",(0,s.jsx)(r.code,{children:"0"})," for ",(0,s.jsx)(r.code,{children:"BTC"}),", ",(0,s.jsx)(r.code,{children:"16"})," for `ETH). For Javascript/Typescript, we have ",(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/address-encoder",children:"@ensdomains/address-encoder"})," library that allows you to convert"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"import { formatsByName, formatsByCoinType } from '@ensdomains/address-encoder';\n\nformatsByName['BTC']\n// {\n//   coinType: 0,\n//   decoder: [Function (anonymous)],\n//   encoder: [Function (anonymous)],\n//   name: 'BTC'\n// }\n"})}),"\n",(0,s.jsxs)(r.p,{children:["To save storage space as well as prevent users from setting wrong token address, the library has ",(0,s.jsx)(r.code,{children:"encoder"})," and ",(0,s.jsx)(r.code,{children:"decoder"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const data = formatsByName['BTC'].decoder('1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa');\nconsole.log(data.toString('hex')); // 76a91462e907b15cbf27d5425399ebf6f0fb50ebb88f1888ac\nconst addr = formatsByCoinType[0].encoder(data);\nconsole.log(addr); // 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n"})}),"\n",(0,s.jsx)(r.h3,{children:"Listing cryptocurrency addresses and text records"}),"\n",(0,s.jsxs)(r.p,{children:["For cryptocurrency addresses and text records, you need to know the coin type or key names to get the value. If you want to list down all the cryptocurrency addresses and text records the user has set, you have to either retrieve the information from ",(0,s.jsx)(r.code,{children:"Event"})," or query via ",(0,s.jsx)(r.a,{href:"https://thegraph.com/explorer/subgraph/ensdomains/ens",children:"ENS subgraph"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"For example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'{\n  domains(where:{name:"vitalik.eth"}) {\n    id\n    name\n    resolver{\n      texts\n      coinTypes\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"will return the following result"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'{\n  "data": {\n    "domains": [\n      {\n        "id": "0xee6c4522aab0003e8d14cd40a6af439055fd2577951148c14b6cea9a53475835",\n        "name": "vitalik.eth",\n        "resolver": {\n          "coinTypes": [\n            60\n          ],\n          "texts": [\n            "url"\n          ]\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(r.h2,{children:"Reverse Resolution"}),"\n",(0,s.jsx)(r.p,{children:"While 'regular' resolution involves mapping from a name to an address, reverse resolution maps from an address back to a name. ENS supports reverse resolution to allow applications to display ENS names in place of hexadecimal addresses."}),"\n",(0,s.jsxs)(r.p,{children:["Reverse resolution is accomplished via the special purpose domain ",(0,s.jsx)(r.em,{children:"addr.reverse"})," and the resolver function ",(0,s.jsx)(r.code,{children:"name()"}),". ",(0,s.jsx)(r.em,{children:"addr.reverse"})," is owned by a special purpose registrar contract that allocates subdomains to the owner of the matching address - for instance, the address ",(0,s.jsx)(r.em,{children:"0x314159265dd8dbb310642f98f50c066173c1259b"})," may claim the name ",(0,s.jsx)(r.em,{children:"314159265dd8dbb310642f98f50c066173c1259b.addr.reverse"}),", and configure a resolver and records on it. The resolver in turn supports the ",(0,s.jsx)(r.code,{children:"name()"})," function, which returns the name associated with that address."]}),"\n",(0,s.jsx)(i.UW,{type:"warning",emoji:"\u26a0\ufe0f",children:(0,s.jsx)(r.p,{children:"ENS does not enforce the accuracy of reverse records - for instance, anyone may claim that the name for their address is 'alice.eth'. To be certain that the claim is accurate, you must always perform a forward resolution for the returned name and check it matches the original address."})}),"\n",(0,s.jsx)(r.p,{children:"Most libraries provide functionality for doing reverse resolution:"}),"\n",(0,s.jsxs)(i.mQ,{children:[(0,s.jsx)(i.OK,{title:"ensjs",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const address = '0x1234...';\nlet ensName = null;\n({ name: ensName } = await ens.getName(address))\n// Check to be sure the reverse record is correct. skip check if the name is null\nif(ensName == null || address != await ens.name(ensName).getAddress()) {\n  ensName = null;\n}\n"})})}),(0,s.jsx)(i.OK,{title:"web3.js",children:(0,s.jsx)(r.p,{children:"Not supported."})}),(0,s.jsx)(i.OK,{title:"ethjs-ens",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var address = '0x1234...';\nvar name = await ens.reverse(address);\n// Check to be sure the reverse record is correct.\nif(address != await ens.lookup(name)) {\n  name = null;\n}\n"})})}),(0,s.jsx)(i.OK,{title:"ethers.js",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"var address = '0x1234...';\nvar name = await provider.lookupAddress(address);\n// ethers.js automatically checks that the forward resolution matches.\n"})})}),(0,s.jsx)(i.OK,{title:"go-ens",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'name, err := ens.ReverseResolve(client, common.HexToAddress("0x1234...")\n'})})}),(0,s.jsx)(i.OK,{title:"web3.py",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"address = '0x1234...'\nname = ns.reverse(address)\n# Check to be sure the reverse record is correct.\nif address != ns.address(name):\n  name = None\n"})})}),(0,s.jsx)(i.OK,{title:"web3j",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:'String address = "0x1234...";\nString name = ens.reverseResolve(address);\n// Check to be sure the reverse record is correct.\nif(address != ens.resolve(name)) {\n  name = null;\n}\n'})})})]}),"\n",(0,s.jsxs)(r.p,{children:["Reverse resolution without a library follows the same pattern as forward resolution: Get the resolver for ",(0,s.jsx)(r.code,{children:"1234....addr.reverse"}),"(where ",(0,s.jsx)(r.em,{children:"1234..."})," is the address you want to reverse-resolve), and call the ",(0,s.jsx)(r.code,{children:"name()"})," function on that resolver. Then, perform a forward resolution to verify the record is accurate."]}),"\n",(0,s.jsxs)(r.p,{children:["If you need to process many addresses (eg: showing reverse record of transaction histories), resolving both reverse and forward resolution for each item may not be practical. We have a seperate smart contract called ",(0,s.jsx)(r.a,{href:"https://github.com/ensdomains/reverse-records",children:(0,s.jsx)(r.code,{children:"ReverseRecords"})})," which allows you to lookup multiple names in one function call."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const namehash = require('eth-ens-namehash');\nconst allnames = await ReverseRecords.getNames(['0x123','0x124'])\nconst validNames = allnames.filter((n) => namehash.normalize(n) === n )\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Make sure to compare that the returned names match with the normalised names to prevent from ",(0,s.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/IDN_homograph_attack",children:"homograph attack"})," as well as people simply using capital letters."]})]})}r.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(d,Object.assign({},e,{children:(0,s.jsx)(c,e)}))}}},function(e){e.O(0,[8164,9214,9774,2888,179],(function(){return r=5696,e(e.s=r);var r}));var r=e.O();_N_E=r}]);