(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1897],{2437:function(e,r,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/raw/contract-developer-guide/writing-a-resolver",function(){return t(3733)}])},3733:function(e,r,t){"use strict";t.r(r);var n=t(4637),a=t(6988),s=t(1177),i=t(9577),o=function(e){return(0,s.withSSG)((0,a.Z)({filename:"writing-a-resolver.mdx",route:"/raw/contract-developer-guide/writing-a-resolver",meta:{},pageMap:[{name:"developer",children:[{name:"basics",route:"/developer/basics"},{name:"getting-started",route:"/developer/getting-started"},{name:"index",route:"/developer"},{name:"meta.json",meta:{index:{title:"Developer Documentation",type:"docs",theme:{}},"getting-started":{title:"Getting Started",type:"docs"},basics:{title:"Basics",type:"docs"},"working-directly-with-ens":{title:"Manual Contract API",type:"docs"}},locale:"en-US"},{name:"working-directly-with-ens",route:"/developer/working-directly-with-ens"}],route:"/developer"},{name:"governance",children:[{name:"index",route:"/governance"},{name:"meta.json",meta:{index:{title:"Governance Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/governance"},{name:"index",route:"/",frontMatter:{title:"Welcome"}},{name:"meta.json",meta:{index:{title:"Introduction",type:"docs",hidden:!0,theme:{}},about:{title:"About ENS",type:"docs",hidden:!0,theme:{}},user:{title:"User",type:"nav"},developer:{title:"Developer",type:"nav"},technical:{title:"Technical",type:"nav"},governance:{title:"Governance",type:"nav"},raw:{title:"Raw",type:"hidden"}},locale:"en-US"},{name:"raw",children:[{name:"SUMMARY",route:"/raw/SUMMARY"},{name:"bug-bounty-program",route:"/raw/bug-bounty-program"},{name:"contract-api-reference",children:[{name:"ENS-Contracts-Overview",route:"/raw/contract-api-reference/ENS-Contracts-Overview"},{name:"dns-registrar",route:"/raw/contract-api-reference/dns-registrar"},{name:"ens",route:"/raw/contract-api-reference/ens",frontMatter:{description:"The ENS registry."}},{name:"eth-permanent-registrar",children:[{name:"README",route:"/raw/contract-api-reference/eth-permanent-registrar/README"},{name:"controller",route:"/raw/contract-api-reference/eth-permanent-registrar/controller"},{name:"registrar",route:"/raw/contract-api-reference/eth-permanent-registrar/registrar"}],route:"/raw/contract-api-reference/eth-permanent-registrar"},{name:"name-processing",route:"/raw/contract-api-reference/name-processing",frontMatter:{description:"Describes how to normalize and hash ENS names."}},{name:"publicresolver",route:"/raw/contract-api-reference/publicresolver",frontMatter:{description:"The default public resolver."}},{name:"reverseregistrar",route:"/raw/contract-api-reference/reverseregistrar",frontMatter:{description:"The registrar responsible for managing reverse resolution via the .addr.reverse special-purpose TLD."}},{name:"testregistrar",route:"/raw/contract-api-reference/testregistrar"}],route:"/raw/contract-api-reference"},{name:"contract-developer-guide",children:[{name:"resolving-names-on-chain",route:"/raw/contract-developer-guide/resolving-names-on-chain"},{name:"writing-a-registrar",route:"/raw/contract-developer-guide/writing-a-registrar"},{name:"writing-a-resolver",route:"/raw/contract-developer-guide/writing-a-resolver"}],route:"/raw/contract-developer-guide"},{name:"dapp-developer-guide",children:[{name:"ens-as-nft",route:"/raw/dapp-developer-guide/ens-as-nft"},{name:"ens-l2-offchain",route:"/raw/dapp-developer-guide/ens-l2-offchain"},{name:"front-end-design-guidelines",route:"/raw/dapp-developer-guide/front-end-design-guidelines",frontMatter:{description:"ENS is a tool to simplify the experience for your users. Here are a series of guidelines and tools that will help you make design choices and implement the best ENS user experience."}},{name:"managing-names",route:"/raw/dapp-developer-guide/managing-names"},{name:"registering-and-renewing-names",route:"/raw/dapp-developer-guide/registering-and-renewing-names"},{name:"resolving-names",route:"/raw/dapp-developer-guide/resolving-names"}],route:"/raw/dapp-developer-guide"},{name:"deploying-ens-on-a-private-chain",route:"/raw/deploying-ens-on-a-private-chain"},{name:"dns-registrar-guide",route:"/raw/dns-registrar-guide"},{name:"ens-deployments",route:"/raw/ens-deployments"},{name:"ens-improvement-proposals",children:[{name:"README",route:"/raw/ens-improvement-proposals/README",frontMatter:{description:"Standards documentation describing the ENS protocol"}},{name:"ensip-1-ens",route:"/raw/ens-improvement-proposals/ensip-1-ens",frontMatter:{description:"Documentation of the basic ENS protocol (formerly EIP-137)."}},{name:"ensip-10-wildcard-resolution",route:"/raw/ens-improvement-proposals/ensip-10-wildcard-resolution",frontMatter:{description:"Provides a mechanism to support wildcard resolution of ENS names (formerly EIP-2544)."}},{name:"ensip-11-evmchain-address-resolution",route:"/raw/ens-improvement-proposals/ensip-11-evmchain-address-resolution",frontMatter:{description:"Introduces coinType for EVM compatible chains (amending ENSIP9)."}},{name:"ensip-12-avatar-text-records",route:"/raw/ens-improvement-proposals/ensip-12-avatar-text-records",frontMatter:{description:"A standard for storage of the avatar text record in ENS."}},{name:"ensip-2-initial-hash-registrar",route:"/raw/ens-improvement-proposals/ensip-2-initial-hash-registrar",frontMatter:{description:"Describes the hash registrar initially used to register ENS .eth domains (formerly EIP-162)."}},{name:"ensip-3-reverse-resolution",route:"/raw/ens-improvement-proposals/ensip-3-reverse-resolution",frontMatter:{description:"Specifies a TLD, registrar, and resolver interface for reverse resolution of Ethereum addresses using ENS (formerly EIP-181)."}},{name:"ensip-4-support-for-contract-abis",route:"/raw/ens-improvement-proposals/ensip-4-support-for-contract-abis",frontMatter:{description:"A mechanism for storing ABI definitions in ENS, for easy lookup of contract interfaces by callers (formerly EIP-205)."}},{name:"ensip-5-text-records",route:"/raw/ens-improvement-proposals/ensip-5-text-records",frontMatter:{description:"A standard for storage of text records in ENS (formerly EIP-634)."}},{name:"ensip-6-dns-in-ens",route:"/raw/ens-improvement-proposals/ensip-6-dns-in-ens",frontMatter:{description:"Defines a resolver profile for ENS that provides features for storage and lookup of DNS records (formerly EIP-1185)."}},{name:"ensip-7-contenthash-field",route:"/raw/ens-improvement-proposals/ensip-7-contenthash-field",frontMatter:{description:"Introduces a field for storing content addresses and hashes in ENS (formerly EIP-1577)."}},{name:"ensip-8-interface-discovery",route:"/raw/ens-improvement-proposals/ensip-8-interface-discovery",frontMatter:{description:"Defines a method of associating contract interfaces with ENS names and addresses, and of discovering those interfaces (formerly EIP-1844)."}},{name:"ensip-9-multichain-address-resolution",route:"/raw/ens-improvement-proposals/ensip-9-multichain-address-resolution",frontMatter:{description:"Introduces new overloads for the `addr` field for ENS resolvers, which permit resolution of addresses for other blockchains via ENS (formerly EIP-2304)."}}],route:"/raw/ens-improvement-proposals"},{name:"ens-migration-february-2020",children:[{name:"guide-for-dapp-developers",route:"/raw/ens-migration-february-2020/guide-for-dapp-developers"},{name:"technical-description",route:"/raw/ens-migration-february-2020/technical-description"}],route:"/raw/ens-migration-february-2020"},{name:"frequently-asked-questions",route:"/raw/frequently-asked-questions"},{name:"permanent-registrar-faq",route:"/raw/permanent-registrar-faq"},{name:"terminology",route:"/raw/terminology"}],route:"/raw"},{name:"technical",children:[{name:"about",route:"/technical/about"},{name:"index",route:"/technical"},{name:"meta.json",meta:{index:{title:"Technical Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/technical"},{name:"user",children:[{name:"index",route:"/user"},{name:"meta.json",meta:{index:{title:"User Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/user"}]},i.Z))(e)};function d(e){var r=Object.assign({h1:"h1",p:"p",a:"a",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h2:"h2"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{children:"Writing a Resolver"}),"\n",(0,n.jsxs)(r.p,{children:["Resolvers are specified in ",(0,n.jsx)(r.a,{href:"https://github.com/ethereum/EIPs/issues/137",children:"EIP137"}),". A resolver must implement the following method:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-text",children:"function supportsInterface(bytes4 interfaceID) constant returns (bool);\n"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"supportsInterface"})," is defined in ",(0,n.jsx)(r.a,{href:"https://github.com/ethereum/EIPs/issues/165",children:"EIP165"}),", and allows callers to determine if a resolver supports a particular record type. Record types are specified as a set of one or more methods that a resolver must implement together. Currently defined record types include:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{align:"left",children:"Record type"}),(0,n.jsx)(r.th,{align:"left",children:"Function(s)"}),(0,n.jsx)(r.th,{align:"left",children:"Interface ID"}),(0,n.jsx)(r.th,{align:"left",children:"Defined in"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{align:"left",children:"Ethereum address"}),(0,n.jsx)(r.td,{align:"left",children:"addr"}),(0,n.jsx)(r.td,{align:"left",children:"0x3b3b57de"}),(0,n.jsx)(r.td,{align:"left",children:(0,n.jsx)(r.a,{href:"https://github.com/ethereum/EIPs/issues/137",children:"EIP137"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{align:"left",children:"ENS Name"}),(0,n.jsx)(r.td,{align:"left",children:"name"}),(0,n.jsx)(r.td,{align:"left",children:"0x691f3431"}),(0,n.jsx)(r.td,{align:"left",children:(0,n.jsx)(r.a,{href:"https://github.com/ethereum/EIPs/issues/181",children:"EIP181"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{align:"left",children:"ABI specification"}),(0,n.jsx)(r.td,{align:"left",children:"ABI"}),(0,n.jsx)(r.td,{align:"left",children:"0x2203ab56"}),(0,n.jsx)(r.td,{align:"left",children:(0,n.jsx)(r.a,{href:"https://eips.ethereum.org/EIPS/eip-205",children:"EIP205"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{align:"left",children:"Public key"}),(0,n.jsx)(r.td,{align:"left",children:"pubkey"}),(0,n.jsx)(r.td,{align:"left",children:"0xc8690233"}),(0,n.jsx)(r.td,{align:"left",children:(0,n.jsx)(r.a,{href:"https://github.com/ethereum/EIPs/pull/619",children:"EIP619"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{align:"left",children:"Text records"}),(0,n.jsx)(r.td,{align:"left",children:"text"}),(0,n.jsx)(r.td,{align:"left",children:"0x59d1d43c"}),(0,n.jsx)(r.td,{align:"left",children:(0,n.jsx)(r.a,{href:"https://eips.ethereum.org/EIPS/eip-634",children:"EIP634"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{align:"left",children:"Content hash"}),(0,n.jsx)(r.td,{align:"left",children:"contenthash"}),(0,n.jsx)(r.td,{align:"left",children:"0xbc1c58d1"}),(0,n.jsx)(r.td,{align:"left"})]})]})]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"supportsInterface"})," must also return true for the interfaceID value 0x01ffc9a7, which is the interface ID of ",(0,n.jsx)(r.code,{children:"supportsInterface"})," itself."]}),"\n",(0,n.jsxs)(r.p,{children:["Additionally, the ",(0,n.jsx)(r.code,{children:"content"})," interface was used as a defacto standard for Swarm hashes, and has an interface ID of 0xd8389dc5. New implementations should use ",(0,n.jsx)(r.code,{children:"contenthash"})," instead."]}),"\n",(0,n.jsx)(r.h2,{children:"Example Resolver"}),"\n",(0,n.jsx)(r.p,{children:"A simple resolver that supports only the addr type might look something like this:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-text",children:"contract SimpleResolver {\n    function supportsInterface(bytes4 interfaceID) constant returns (bool) {\n        return interfaceID == 0x3b3b57de;\n    }\n\n    function addr(bytes32 nodeID) constant returns (address) {\n        return address(this);\n    }\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"This trivial resolver always returns its own address as answer to all queries. Practical resolvers may use any mechanism they wish to determine what results to return, though they should be constant, and should minimise gas usage wherever possible."})]})}r.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,n.jsx)(o,Object.assign({},e,{children:(0,n.jsx)(d,e)}))}}},function(e){e.O(0,[1577,9214,9774,2888,179],(function(){return r=2437,e(e.s=r);var r}));var r=e.O();_N_E=r}]);