(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8944],{3139:function(s,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/web/resolution",function(){return o(9904)}])},9904:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return r}});var a=o(1527),e=o(313);function t(s){let n=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,e.ah)(),s.components),{EmbedLink:o,CodeGroup:t}=n;return t||l("CodeGroup",!0),o||l("EmbedLink",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Getting Started"}),"\n",(0,a.jsx)(n.p,{children:"The ENS Protocol aims to make it easy to use Ethereum. It does this to providing a simple way to use human-readable names to subsitute for long machine-redable addresses."}),"\n",(0,a.jsx)(n.p,{children:"On this page you will find everything it takes to get started with ENS, replace all addresses with ens names in your app, and allow finding users by name!"}),"\n",(0,a.jsx)(o,{href:"/resolvers/",title:"In-Depth Resolution",description:"To learn more about the resolution process, please read the Resolution section."}),"\n",(0,a.jsx)(n.h2,{id:"getting-the-users-ethereum-address",children:"Getting the users Ethereum Address",navtitle:"Ethereum Address",id:"address",tag:"Forward Lookup"}),"\n",(0,a.jsx)(n.p,{children:"The simplest thing you can do with ENS is to get the users Ethereum address. This is done by using the forward lookup method, which takes an ENS name and returns the address. You might use this for input boxes,"}),"\n",(0,a.jsxs)("div",{className:"card px-8 py-4 flex justify-center gap-2",children:[(0,a.jsx)("span",{children:"luc.eth"}),"\n",(0,a.jsx)("span",{children:"➡️"}),"\n",(0,a.jsx)("span",{children:"0x225...c3B5"})]}),"\n",(0,a.jsxs)(t,{title:"Request",children:[(0,a.jsx)(n.pre,{language:"tsx",code:"import { useAccount, useEnsName, useEnsAvatar } from 'wagmi';\n\nconst Name = () => {\n    const { data: ensName } = useEnsAddress({\n        address: 'luc.eth', // The name to lookup\n        chainId: 1, // The chainId to lookup on\n    });\n\n    return <div>{ensName || address}</div>;\n};\n",children:(0,a.jsx)(n.code,{className:"language-tsx",children:'<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useAccount</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsAvatar } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;wagmi&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Name</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensName</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsAddress</span><span style="color: var(--shiki-color-text)">({</span></span>\n<span><span style="color: var(--shiki-color-text)">        address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;luc.eth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// The name to lookup</span></span>\n<span><span style="color: var(--shiki-color-text)">        chainId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// The chainId to lookup on</span></span>\n<span><span style="color: var(--shiki-color-text)">    });</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;{ensName </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> address}&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>\n<span><span style="color: var(--shiki-color-text)">};</span></span>\n<span></span>'}),title:"Wagmi (React)",language:"tsx",meta:"hi",focus:"4"}),(0,a.jsx)(n.pre,{language:"ts",code:"const address = await provider.lookupAddress('luc.eth');\n",children:(0,a.jsx)(n.code,{className:"language-ts",children:'<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">provider</span><span style="color: var(--shiki-token-function)">.lookupAddress</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;luc.eth&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>\n<span></span>'}),title:"Ethers.js (TS)"}),(0,a.jsx)(n.pre,{language:"ts",code:"import { normalize } from 'viem/ens';\nimport { publicClient } from './client';\n\nconst ensAddress = await publicClient.getEnsAddress({\n    name: normalize('luc.eth'),\n});\n",children:(0,a.jsx)(n.code,{className:"language-ts",children:'<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { normalize } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;viem/ens&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { publicClient } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./client&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ensAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">publicClient</span><span style="color: var(--shiki-token-function)">.getEnsAddress</span><span style="color: var(--shiki-color-text)">({</span></span>\n<span><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">normalize</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;luc.eth&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">});</span></span>\n<span></span>'}),title:"Viem (TS)"}),(0,a.jsx)(n.pre,{language:"rust",code:'let provider = Provider::<Http>::try_from("https://mainnet.infura.io/v3/...")?;\n\nlet address = provider.lookup_address("luc.eth").await?;\n',children:(0,a.jsx)(n.code,{className:"language-rust",children:'<span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> provider </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Provider</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Http</span><span style="color: var(--shiki-color-text)">&gt;</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-token-function)">try_from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;https://mainnet.infura.io/v3/...&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> provider</span><span style="color: var(--shiki-token-keyword)">.</span><span style="color: var(--shiki-token-function)">lookup_address</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;luc.eth&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">.await?</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>'}),title:"Ethers.rs (Rust)"})]}),"\n",(0,a.jsx)(n.h2,{id:"multi-chain-addresses-btc-ltc-etc",children:"Multi-Chain Addresses (BTC, LTC, etc)",navtitle:"Multi-Chain Addresses",label:"Multi-Chain",id:"multi-chain",tag:""}),"\n",(0,a.jsxs)(n.p,{children:["ENS Addresses arent just limited to Ethereum Addresses, instead it supports ",(0,a.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"SLIP-0044"}),", meaning you can also get other addresses such as BTC, LTC, etc.\nThe standardization of multichain addresses was first introduced in ",(0,a.jsx)(n.a,{href:"/ensips/ensip-9",children:"ENSIP-9"}),", and also ",(0,a.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-2304",children:"EIP-2304"}),"."]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Chain"}),(0,a.jsx)(n.th,{children:"ID"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"BTC"}),(0,a.jsx)(n.td,{children:"0"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"LTC"}),(0,a.jsx)(n.td,{children:"2"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"DOGE"}),(0,a.jsx)(n.td,{children:"3"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Solana"}),(0,a.jsx)(n.td,{children:"501"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Optimism"}),(0,a.jsx)(n.td,{children:"614"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Polygon (Matic)"}),(0,a.jsx)(n.td,{children:"966"})]})]})]}),"\n",(0,a.jsx)("div",{className:"w-full flex items-center justify-center gap-1 -mt-14",children:(0,a.jsxs)(n.p,{children:["... and many many more following\n",(0,a.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"SLIP-0044"})]})}),"\n",(0,a.jsxs)(t,{title:"Multichain Address Lookup",children:[(0,a.jsx)(n.pre,{language:"tsx",code:"import { useEnsMultichainAddress } from 'ens-tools/react';\n\nconst BitcoinAddress = () => {\n    const { address: btcAddress, chainId } = useEnsMultichainAddress({\n        name: 'luc.eth',\n        coinType: 1, // BTC\n    });\n\n    return <div>BTC: {btcAddress}</div>;\n};\n",children:(0,a.jsx)(n.code,{className:"language-tsx",children:'<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useEnsMultichainAddress } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ens-tools/react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">BitcoinAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { address: </span><span style="color: var(--shiki-token-constant)">btcAddress</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chainId</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsMultichainAddress</span><span style="color: var(--shiki-color-text)">({</span></span>\n<span><span style="color: var(--shiki-color-text)">        name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;luc.eth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">        coinType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// BTC</span></span>\n<span><span style="color: var(--shiki-color-text)">    });</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;BTC: {btcAddress}&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>\n<span><span style="color: var(--shiki-color-text)">};</span></span>\n<span></span>'}),title:"Wagmi (React)",language:"tsx"}),(0,a.jsx)(n.pre,{language:"ts",code:"const resolver = await provider.getResolver('luc.eth');\nconst btcAddress = await resolver?.getAddress(1);\n",children:(0,a.jsx)(n.code,{className:"language-ts",children:'<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">resolver</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">provider</span><span style="color: var(--shiki-token-function)">.getResolver</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;luc.eth&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">btcAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">resolver</span><span style="color: var(--shiki-token-function)">?.getAddress</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>\n<span></span>'}),title:"Ethers.js (TS)"})]}),"\n",(0,a.jsx)(n.h2,{id:"reverse-lookup-name-address",children:"Reverse Lookup (Name ➡️ Address)",navtitle:"Reverse Lookup",id:"reverse-lookup",tag:"Reverse Lookup"}),"\n",(0,a.jsx)(n.p,{children:"The reverse lookup method allows us to easily get the ENS name of an address. This removes the need for your app to have verbose addresses everywhere and allows you to simply show the users name!"}),"\n",(0,a.jsxs)("div",{className:"card px-8 py-4 flex justify-center gap-2",children:[(0,a.jsx)("span",{className:"w-fit",children:"0x225...c3B5"}),"\n",(0,a.jsx)("span",{children:"➡️"}),"\n",(0,a.jsx)("span",{children:"luc.eth"})]}),"\n",(0,a.jsxs)(t,{title:"Reverse Lookup",children:[(0,a.jsx)(n.pre,{language:"tsx",code:"import { useEnsName } from 'wagmi';\n\nconst BitcoinAddress = () => {\n    const { data: name, chainId } = useEnsName({\n        address: '0x225f137127d9067788314bc7fcc1f36746a3c3B5',\n    });\n\n    return <div>Name: {name}</div>;\n};\n",children:(0,a.jsx)(n.code,{className:"language-tsx",children:'<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useEnsName } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;wagmi&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">BitcoinAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chainId</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsName</span><span style="color: var(--shiki-color-text)">({</span></span>\n<span><span style="color: var(--shiki-color-text)">        address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;0x225f137127d9067788314bc7fcc1f36746a3c3B5&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">    });</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Name: {name}&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>\n<span><span style="color: var(--shiki-color-text)">};</span></span>\n<span></span>'}),title:"Wagmi (React)",language:"tsx"}),(0,a.jsx)(n.pre,{language:"ts",code:"// 0x225f137127d9067788314bc7fcc1f36746a3c3B5 -> luc.eth\nconst name = await provider.lookupAddress(\n    '0x225f137127d9067788314bc7fcc1f36746a3c3B5'\n);\n",children:(0,a.jsx)(n.code,{className:"language-ts",children:'<span><span style="color: var(--shiki-token-comment)">// 0x225f137127d9067788314bc7fcc1f36746a3c3B5 -&gt; luc.eth</span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">provider</span><span style="color: var(--shiki-token-function)">.lookupAddress</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;0x225f137127d9067788314bc7fcc1f36746a3c3B5&#39;</span></span>\n<span><span style="color: var(--shiki-color-text)">);</span></span>\n<span></span>'}),title:"Ethers.js (TS)"})]})]})}var r=!0;function l(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,e.ah)(),s.components);return n?(0,a.jsx)(n,Object.assign({},s,{children:(0,a.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=3139)}),_N_E=s.O()}]);