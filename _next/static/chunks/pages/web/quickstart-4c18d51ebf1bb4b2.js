(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[402],{5475:function(s,o,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/web/quickstart",function(){return n(6672)}])},6672:function(s,o,n){"use strict";n.r(o),n.d(o,{__N_SSG:function(){return r}});var a=n(1527),e=n(313);function t(s){let o=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",pre:"pre",code:"code",h3:"h3"},(0,e.ah)(),s.components),{VideoComponent:n,Note:t,CodeGroup:r,Button:i,Row:p,Col:c}=o;return i||l("Button",!0),r||l("CodeGroup",!0),c||l("Col",!0),t||l("Note",!0),p||l("Row",!0),n||l("VideoComponent",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.h1,{children:"Quickstart for dApp Developers"}),"\n",(0,a.jsx)(n,{src:"https://v3x.space/ens-docs/dapp"}),"\n",(0,a.jsx)(o.p,{children:"This guide will walk you through how to implement the basics of ENS into your dApp. This quickstart guide assumes you are building with react"}),"\n",(0,a.jsx)(t,{children:(0,a.jsxs)(o.p,{children:["Before you can look up on-chain ENS information, you will need to pick an\nRPC provider to interface with Ethereum. Read more about picking an RPC\nprovider at ",(0,a.jsx)(o.a,{href:"/libraries",children:"RPC"}),"."]})}),"\n",(0,a.jsx)(o.h2,{id:"choose-your-client",children:"Choose your client"}),"\n",(0,a.jsx)(o.p,{children:"Before making your first request, you need to pick which library you will use.\nIn the following example, you can see how to install each library."}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)(o.pre,{language:"bash",code:"# Run this in your terminal\nnpm install wagmi ethers\n",children:(0,a.jsx)(o.code,{className:"language-bash",children:'<span style="color: var(--shiki-token-comment)"># Run this in your terminal</span>\n<span style="color: var(--shiki-color-text)">npm install wagmi ethers</span>'}),title:"Wagmi (TS)",language:"javascript"}),(0,a.jsx)(o.pre,{language:"bash",code:"# Run this in your terminal\nnpm install ethers\n",children:(0,a.jsx)(o.code,{className:"language-bash",children:'<span style="color: var(--shiki-token-comment)"># Run this in your terminal</span>\n<span style="color: var(--shiki-color-text)">npm install ethers</span>'}),title:"Ethers.js (TS)",language:"javascript"}),(0,a.jsx)(o.pre,{language:"bash",code:"# Run this in your terminal\nnpm install viem\n",children:(0,a.jsx)(o.code,{className:"language-bash",children:'<span style="color: var(--shiki-token-comment)"># Run this in your terminal</span>\n<span style="color: var(--shiki-color-text)">npm install viem</span>'}),title:"Viem (TS)",language:"javascript"}),(0,a.jsx)(o.pre,{language:"bash",code:"# Run this in your terminal\nnpm install web3\n",children:(0,a.jsx)(o.code,{className:"language-bash",children:'<span style="color: var(--shiki-token-comment)"># Run this in your terminal</span>\n<span style="color: var(--shiki-color-text)">npm install web3</span>'}),title:"Web3.js",language:"javascript"}),(0,a.jsx)(o.pre,{language:"bash",code:"# Run this in your terminal\npip install web3.py\n",children:(0,a.jsx)(o.code,{className:"language-bash",children:'<span style="color: var(--shiki-token-comment)"># Run this in your terminal</span>\n<span style="color: var(--shiki-color-text)">pip install web3.py</span>'}),title:"web3.py",language:"python"}),(0,a.jsx)(o.pre,{language:"bash",code:'# Put this in your Cargo.toml\n[dependencies]\nethers = "2.0.0"\n',children:(0,a.jsx)(o.code,{className:"language-bash",children:'<span style="color: var(--shiki-token-comment)"># Put this in your Cargo.toml</span>\n<span style="color: var(--shiki-color-text)">[dependencies]</span>\n<span style="color: var(--shiki-color-text)">ethers = </span><span style="color: var(--shiki-token-string-expression)">&quot;2.0.0&quot;</span>'}),title:"Ethers.rs (Rust)",language:"rust"})]}),"\n",(0,a.jsx)("div",{className:"not-prose",children:(0,a.jsx)(i,{href:"/libraries",variant:"text",arrow:"right",children:"Check out our list of first-party Libraries"})}),"\n",(0,a.jsx)(o.h2,{id:"showing-profile",children:"Showing Profile"}),"\n",(0,a.jsx)(o.p,{children:"When users sign-in to your dApp using Ethereum they expect to be able to see what account they have signed in with. Usually this is shown in the top-right, or top-left (on RTL devices) and look something like this."}),"\n",(0,a.jsx)("div",{}),"\n",(0,a.jsxs)(p,{children:[(0,a.jsxs)(c,{children:[(0,a.jsx)(o.h3,{children:"Example Profile Component"}),(0,a.jsx)(r,{children:(0,a.jsx)("div",{title:"Preview",className:"not-prose flex justify-center items-center",hideCopy:!0,children:(0,a.jsxs)("div",{className:"flex items-center gap-2 py-4",children:[(0,a.jsx)("div",{className:"w-10 h-10 rounded-full overflow-hidden",children:(0,a.jsx)("img",{src:"https://metadata.ens.domains/mainnet/avatar/luc.computer",className:"w-full h-full object-contain"})}),(0,a.jsxs)("div",{className:"flex flex-col font-sans",children:[(0,a.jsx)("p",{className:"font-extrabold",children:"luc.computer"}),"\n",(0,a.jsx)("p",{className:"leading-3",children:"0x225...c3b5"})]})]})})}),(0,a.jsx)(o.p,{children:"This endpoint allows you to retrieve a paginated list of all your conversations. By default, a maximum of ten conversations are shown per page."})]}),(0,a.jsx)(c,{sticky:!0,children:(0,a.jsxs)(r,{title:"Request",tag:"Example",label:"Address & Avatar",children:[(0,a.jsx)(o.pre,{language:"ts",code:'// Initialize the Ethers Provider\nconst provider = new JsonRpcProvider();\n\n// Get the Address\nconst address = await provider.lookupAddress("luc.computer");\n\n// Get the Avatar\nconst avatar = await provider.getAvatar("luc.computer");\n\n// Celebrate \uD83C\uDF89\nconsole.log(`Hello ${avatar}`);\n',children:(0,a.jsx)(o.code,{className:"language-ts",children:'<span style="color: var(--shiki-token-comment)">// Initialize the Ethers Provider</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">provider</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">JsonRpcProvider</span><span style="color: var(--shiki-color-text)">();</span>\n<span style="color: var(--shiki-token-comment)">// Get the Address</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">provider</span><span style="color: var(--shiki-token-function)">.lookupAddress</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;luc.computer&quot;</span><span style="color: var(--shiki-color-text)">);</span>\n<span style="color: var(--shiki-token-comment)">// Get the Avatar</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">avatar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">provider</span><span style="color: var(--shiki-token-function)">.getAvatar</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;luc.computer&quot;</span><span style="color: var(--shiki-color-text)">);</span>\n<span style="color: var(--shiki-token-comment)">// Celebrate \uD83C\uDF89</span>\n<span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Hello </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">avatar</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span>'}),title:"Ethers.js (TS)"}),(0,a.jsx)(o.pre,{language:"ts",code:"// Import viem.sh\nimport { normalize } from 'viem/ens'\nimport { publicClient } from './client'\n\n// Get the Address\nconst ensAddress = await publicClient.getEnsAddress({\n    name: normalize('wagmi-dev.eth'),\n})\n\n//  Result:\n// '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n",children:(0,a.jsx)(o.code,{className:"language-ts",children:'<span style="color: var(--shiki-token-comment)">// Import viem.sh</span>\n<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { normalize } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;viem/ens&#39;</span>\n<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { publicClient } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./client&#39;</span>\n<span style="color: var(--shiki-token-comment)">// Get the Address</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ensAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">publicClient</span><span style="color: var(--shiki-token-function)">.getEnsAddress</span><span style="color: var(--shiki-color-text)">({</span>\n<span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">normalize</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;wagmi-dev.eth&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span>\n<span style="color: var(--shiki-color-text)">})</span>\n<span style="color: var(--shiki-token-comment)">//  Result:</span>\n<span style="color: var(--shiki-token-comment)">// &#39;0xd2135CfB216b74109775236E36d4b433F1DF507B&#39;</span>'}),title:"Viem (TS)"}),(0,a.jsx)(o.pre,{language:"tsx",code:'import { useAccount, useEnsName, useEnsAvatar } from \'wagmi\';\nimport { shortenAddress } from \'./lib\';\n\nconst UserProfile = () => {\n    // Get the account address\n    const { address } = useAccount();\n    // Get the ENS name and avatar\n    const { data: ensName } = useEnsName({ address });\n    // Get the ENS avatar\n    const { data: ensAvatar } = useEnsAvatar({ address });\n\n    return (\n        <div className="flex items-center gap-4">\n            <div className="w-10 h-10 rounded-full overflow-hidden">\n                <img src={ensAvatar} className="w-full h-full object-contain" />\n            </div>\n            <div className="flex flex-col font-sans">\n                <p className="font-extrabold">{ensName}</p>\n                <p className="leading-3">{shortenAddress(address)}</p>\n            </div>\n        </div>\n    );\n};\n',children:(0,a.jsx)(o.code,{className:"language-tsx",children:'<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useAccount</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsAvatar } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;wagmi&#39;</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { shortenAddress } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./lib&#39;</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserProfile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Get the account address</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useAccount</span><span style="color: var(--shiki-color-text)">();</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Get the ENS name and avatar</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensName</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsName</span><span style="color: var(--shiki-color-text)">({ address });</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Get the ENS avatar</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensAvatar</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsAvatar</span><span style="color: var(--shiki-color-text)">({ address });</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span>\n<span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flex items-center gap-4&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;w-10 h-10 rounded-full overflow-hidden&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{ensAvatar} </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;w-full h-full object-contain&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flex flex-col font-sans&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-extrabold&quot;</span><span style="color: var(--shiki-color-text)">&gt;{ensName}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;leading-3&quot;</span><span style="color: var(--shiki-color-text)">&gt;{</span><span style="color: var(--shiki-token-function)">shortenAddress</span><span style="color: var(--shiki-color-text)">(address)}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">    );</span>\n<span style="color: var(--shiki-color-text)">};</span>'}),title:"Wagmi (TS)",language:"tsx"}),(0,a.jsx)(o.pre,{language:"rust",code:'use ethers::prelude::*;\nuse ethers::providers::{Provider, Http};\nuse ethers::utils::Address;\n\n#[tokio::main]\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Initialize the Ethers Provider\n    let provider = Provider::<Http>::try_from("https://mainnet.infura.io/v3/...")?;\n\n    // Get the Address\n    let address = provider.lookup_address("luc.computer").await?;\n\n    // Get the Avatar\n    let avatar = provider.get_avatar("luc.computer").await?;\n\n    // Celebrate \uD83C\uDF89\n    println!("Hello {}", address);\n    Ok(())\n}\n',children:(0,a.jsx)(o.code,{className:"language-rust",children:'<span style="color: var(--shiki-token-keyword)">use</span><span style="color: var(--shiki-color-text)"> ethers</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">prelude</span><span style="color: var(--shiki-token-keyword)">::*</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">use</span><span style="color: var(--shiki-color-text)"> ethers</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">providers</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-function)">Provider</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-function)">Http</span><span style="color: var(--shiki-color-text)">};</span>\n<span style="color: var(--shiki-token-keyword)">use</span><span style="color: var(--shiki-color-text)"> ethers</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">utils</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-token-function)">Address</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-color-text)">#[tokio</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">main]</span>\n<span style="color: var(--shiki-token-keyword)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Result</span><span style="color: var(--shiki-color-text)">&lt;(), </span><span style="color: var(--shiki-token-function)">Box</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-keyword)">dyn</span><span style="color: var(--shiki-color-text)"> std</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">error</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-token-function)">Error</span><span style="color: var(--shiki-color-text)">&gt;&gt; {</span>\n<span style="color: var(--shiki-token-comment)">    // Initialize the Ethers Provider</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> provider </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Provider</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Http</span><span style="color: var(--shiki-color-text)">&gt;</span><span style="color: var(--shiki-token-keyword)">::</span><span style="color: var(--shiki-token-function)">try_from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;https://mainnet.infura.io/v3/...&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-comment)">    // Get the Address</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> provider</span><span style="color: var(--shiki-token-keyword)">.</span><span style="color: var(--shiki-token-function)">lookup_address</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;luc.computer&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">.await?</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-comment)">    // Get the Avatar</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> avatar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> provider</span><span style="color: var(--shiki-token-keyword)">.</span><span style="color: var(--shiki-token-function)">get_avatar</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;luc.computer&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">.await?</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-comment)">    // Celebrate \uD83C\uDF89</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">println!</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Hello {}&quot;</span><span style="color: var(--shiki-color-text)">, address);</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">Ok</span><span style="color: var(--shiki-color-text)">(())</span>\n<span style="color: var(--shiki-color-text)">}</span>'}),title:"Ethers.rs (Rust)"})]})})]}),"\n",(0,a.jsx)(o.h2,{id:"finding-users",children:"Finding Users"}),"\n",(0,a.jsxs)(o.p,{children:["When your users search for other users, they can enter either addresses or ens names, to be able to resolve a name to an address we make use of ",(0,a.jsx)("a",{href:"/forward-resolution",children:"Forward Resolution"}),"."]}),"\n",(0,a.jsx)("div",{className:"not-prose",children:(0,a.jsx)(i,{href:"/forward-resolution",variant:"text",arrow:"right",children:"Check out Forward Resolution"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsxs)("div",{title:"Preview",className:"not-prose flex justify-center items-center",hideCopy:!0,children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{htmlFor:"email",className:"block text-sm font-medium text-zinc-200",children:(0,a.jsx)(o.p,{children:"ENS"})}),(0,a.jsxs)("div",{className:"relative mt-1 rounded-md shadow-sm",children:[(0,a.jsx)("div",{className:"pointer-events-none absolute inset-y-0 left-0 flex items-center",children:(0,a.jsx)("img",{src:"https://metadata.ens.domains/mainnet/avatar/luc.computer",className:"w-full h-full object-contain"})}),(0,a.jsx)("input",{type:"ens",name:"ens",id:"ens",className:"block text-lg w-full rounded-md bg-zinc-500/10 border-zinc-800/10 pl-10 focus:border-zinc-500 focus:ring-zinc-500",placeholder:"luc.computer"})]})]}),(0,a.jsxs)("div",{className:"flex items-center gap-2 py-4",children:[(0,a.jsx)("div",{className:"w-10 h-10 rounded-full overflow-hidden"}),(0,a.jsx)("div",{className:"flex flex-col font-sans"})]})]}),(0,a.jsx)(o.pre,{language:"tsx",code:'import { FC } from \'react\';\nimport { useAccount, useEnsName, useEnsAvatar } from \'wagmi\';\n\nconst shortenAddress = (address: string) =>\n    address.slice(0, 5) + \'...\' + address.slice(-4);\n\nexport const App: FC = () => {\n    const { address } = useAccount();\n    const { data: ensName } = useEnsName({ address });\n    const { data: ensAvatar } = useEnsAvatar({ address });\n\n    return (\n        <div className="flex items-center gap-4">\n            <div className="w-10 h-10 rounded-full overflow-hidden">\n                <img src={ensAvatar} className="w-full h-full object-contain" />\n            </div>\n            <div className="flex flex-col font-sans">\n                <p className="font-extrabold">{ensName}</p>\n                <p className="leading-3">{shortenAddress(address)}</p>\n            </div>\n        </div>\n    );\n};\n',children:(0,a.jsx)(o.code,{className:"language-tsx",children:'<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { FC } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useAccount</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsAvatar } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;wagmi&#39;</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">shortenAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-color-text)">);</span>\n<span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FC</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useAccount</span><span style="color: var(--shiki-color-text)">();</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensName</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsName</span><span style="color: var(--shiki-color-text)">({ address });</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensAvatar</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsAvatar</span><span style="color: var(--shiki-color-text)">({ address });</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span>\n<span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flex items-center gap-4&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;w-10 h-10 rounded-full overflow-hidden&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{ensAvatar} </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;w-full h-full object-contain&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flex flex-col font-sans&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-extrabold&quot;</span><span style="color: var(--shiki-color-text)">&gt;{ensName}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;leading-3&quot;</span><span style="color: var(--shiki-color-text)">&gt;{</span><span style="color: var(--shiki-token-function)">shortenAddress</span><span style="color: var(--shiki-color-text)">(address)}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">    );</span>\n<span style="color: var(--shiki-color-text)">};</span>'}),title:"Code",language:"tsx"})]}),"\n",(0,a.jsx)(o.h2,{id:"reverse-resolution",children:"Reverse Resolution"}),"\n",(0,a.jsx)(o.p,{children:"When you are showing data to the user you might want to translate addresses to ENS names where applicable. So instead of showing addresses everywhere you could show names and profile pictures."}),"\n",(0,a.jsx)("div",{className:"not-prose",children:(0,a.jsx)(i,{href:"/reverse-resolution",variant:"text",arrow:"right",children:"Check out Reverse Resolution"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("div",{title:"Preview",className:"not-prose flex justify-center items-center",hideCopy:!0,children:(0,a.jsxs)("div",{className:"flex items-center gap-2 py-4",children:[(0,a.jsx)("div",{className:"w-10 h-10 rounded-full overflow-hidden",children:(0,a.jsx)("img",{src:"https://metadata.ens.domains/mainnet/avatar/luc.computer",className:"w-full h-full object-contain"})}),(0,a.jsx)("div",{className:"flex flex-col font-sans",children:(0,a.jsx)("p",{className:"font-extrabold",children:"luc.computer"})})]})}),(0,a.jsx)(o.pre,{language:"tsx",code:'import { FC } from \'react\';\nimport { useAccount, useEnsName, useEnsAvatar } from \'wagmi\';\n\nconst shortenAddress = (address: string) =>\n    address.slice(0, 5) + \'...\' + address.slice(-4);\n\nexport const User: FC<{ address: string }> = ({ address }) => {\n    const { data: ensName } = useEnsName({ address });\n    const { data: ensAvatar } = useEnsAvatar({ address });\n\n    return (\n        <div className="flex items-center gap-4">\n            <div className="w-10 h-10 rounded-full overflow-hidden">\n                <img src={ensAvatar} className="w-full h-full object-contain" />\n            </div>\n            <div className="flex flex-col font-sans">\n                <p className="font-extrabold">{ensName}</p>\n            </div>\n        </div>\n    );\n};\n',children:(0,a.jsx)(o.code,{className:"language-tsx",children:'<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { FC } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useAccount</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useEnsAvatar } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;wagmi&#39;</span><span style="color: var(--shiki-color-text)">;</span>\n<span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">shortenAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-color-text)">);</span>\n<span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">User</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FC</span><span style="color: var(--shiki-color-text)">&lt;{ address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> }&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ({ address }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensName</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsName</span><span style="color: var(--shiki-color-text)">({ address });</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { data: </span><span style="color: var(--shiki-token-constant)">ensAvatar</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useEnsAvatar</span><span style="color: var(--shiki-color-text)">({ address });</span>\n<span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span>\n<span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flex items-center gap-4&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;w-10 h-10 rounded-full overflow-hidden&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{ensAvatar} </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;w-full h-full object-contain&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flex flex-col font-sans&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-extrabold&quot;</span><span style="color: var(--shiki-color-text)">&gt;{ensName}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span>\n<span style="color: var(--shiki-color-text)">    );</span>\n<span style="color: var(--shiki-color-text)">};</span>'}),title:"Code",language:"tsx"})]})]})}var r=!0;function l(s,o){throw Error("Expected "+(o?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}o.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:o}=Object.assign({},(0,e.ah)(),s.components);return o?(0,a.jsx)(o,Object.assign({},s,{children:(0,a.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=5475)}),_N_E=s.O()}]);