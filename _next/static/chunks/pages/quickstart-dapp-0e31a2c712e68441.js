(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[893],{4719:function(n,s,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quickstart-dapp",function(){return o(6135)}])},6135:function(n,s,o){"use strict";o.r(s),o.d(s,{__N_SSG:function(){return r}});var e=o(1527),a=o(313);function t(n){let s=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li"},(0,a.ah)(),n.components),{Note:o,CodeGroup:t,Button:r}=s;return r||i("Button",!0),t||i("CodeGroup",!0),o||i("Note",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(s.h1,{children:"Quickstart for dApp Developers"}),"\n",(0,e.jsx)(s.p,{children:"This guide will walk you through how to implement the basics of ENS into your dApp. This quickstart guide assumes you are building with react"}),"\n",(0,e.jsx)(o,{children:(0,e.jsxs)(s.p,{children:["Before you can look up on-chain ENS information, you will need to pick an RPC provider to interface with Ethereum. Read more about picking an RPC provider at ",(0,e.jsx)(s.a,{href:"/libraries",children:"RPC"}),"."]})}),"\n",(0,e.jsx)(s.h2,{id:"choose-your-client",children:"Choose your client"}),"\n",(0,e.jsx)(s.p,{children:"Before making your first request, you need to pick which library you will use.\nIn the following example, you can see how to install each library."}),"\n",(0,e.jsxs)(t,{children:[(0,e.jsx)(s.pre,{language:"bash",code:"npm install wagmi ethers\n",children:(0,e.jsx)(s.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">npm install wagmi ethers</span></span>\n<span></span>'}),title:"Wagmi",language:"javascript"}),(0,e.jsx)(s.pre,{language:"bash",code:"npm install ethers\n",children:(0,e.jsx)(s.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">npm install ethers</span></span>\n<span></span>'}),title:"Ethers",language:"javascript"}),(0,e.jsx)(s.pre,{language:"bash",code:"npm install web3\n",children:(0,e.jsx)(s.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">npm install web3</span></span>\n<span></span>'}),title:"Web3.js",language:"javascript"}),(0,e.jsx)(s.pre,{language:"bash",code:"pip install web3.py\n",children:(0,e.jsx)(s.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">pip install web3.py</span></span>\n<span></span>'}),title:"web3.py",language:"python"})]}),"\n",(0,e.jsx)("div",{className:"not-prose",children:(0,e.jsx)(r,{href:"/sdks",variant:"text",arrow:"right",children:"Check out our list of first-party SDKs"})}),"\n",(0,e.jsx)(s.h2,{id:"making-your-first-api-request",children:"Making your first API request"}),"\n",(0,e.jsx)(s.p,{children:"After picking your preferred client, you are ready to make your first call to the Protocol API. Below, you can see how to send a GET request to the Conversations endpoint to get a list of all your conversations. In the cURL example, results are limited to ten conversations, the default page length for each client."}),"\n",(0,e.jsxs)(t,{tag:"GET",label:"/v1/conversations",children:[(0,e.jsx)(s.pre,{language:"bash",code:'curl -G https://api.protocol.chat/v1/conversations \\\n  -H "Authorization: Bearer {token}" \\\n  -d limit=10\n',children:(0,e.jsx)(s.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">curl -G https://api.protocol.chat/v1/conversations \\</span></span>\n<span><span style="color: var(--shiki-color-text)">  -H </span><span style="color: var(--shiki-token-string-expression)">&quot;Authorization: Bearer {token}&quot;</span><span style="color: var(--shiki-color-text)"> \\</span></span>\n<span><span style="color: var(--shiki-color-text)">  -d limit=10</span></span>\n<span></span>'}),title:"cURL"}),(0,e.jsx)(s.pre,{language:"js",code:"import ApiClient from '@example/protocol-api'\n\nconst client = new ApiClient(token)\n\nawait client.conversations.list()\n",children:(0,e.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> ApiClient </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@example/protocol-api&#39;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">client</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ApiClient</span><span style="color: var(--shiki-color-text)">(token)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">client</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">conversations</span><span style="color: var(--shiki-token-function)">.list</span><span style="color: var(--shiki-color-text)">()</span></span>\n<span></span>'})}),(0,e.jsx)(s.pre,{language:"python",code:"from protocol_api import ApiClient\n\nclient = ApiClient(token)\n\nclient.conversations.list()\n",children:(0,e.jsx)(s.code,{className:"language-python",children:'<span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> protocol_api </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> ApiClient</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">client </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ApiClient</span><span style="color: var(--shiki-token-punctuation)">(token)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">client</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-color-text)">conversations</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">list</span><span style="color: var(--shiki-token-punctuation)">()</span></span>\n<span></span>'})}),(0,e.jsx)(s.pre,{language:"php",code:"$client = new \\Protocol\\ApiClient($token);\n\n$client->conversations->list();\n",children:(0,e.jsx)(s.code,{className:"language-php",children:'<span><span style="color: var(--shiki-color-text)">$client </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">\\</span><span style="color: var(--shiki-token-constant)">Protocol</span><span style="color: var(--shiki-token-punctuation)">\\</span><span style="color: var(--shiki-token-constant)">ApiClient</span><span style="color: var(--shiki-color-text)">($token);</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">$client</span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)">conversations</span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-token-function)">list</span><span style="color: var(--shiki-token-punctuation)">()</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>'})})]}),"\n",(0,e.jsx)("div",{className:"not-prose",children:(0,e.jsx)(r,{href:"/conversations",variant:"text",arrow:"right",children:"Read the docs for the Conversations endpoint"})}),"\n",(0,e.jsx)(s.h2,{id:"what-s-next",children:"What's next?"}),"\n",(0,e.jsx)(s.p,{children:"Great, you're now set up with an API client and have made your first request to the API. Here are a few links that might be handy as you venture further into the Protocol API:"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:(0,e.jsx)(s.a,{href:"#",children:"Grab your API key from the Protocol dashboard"})}),"\n",(0,e.jsx)(s.li,{children:(0,e.jsx)(s.a,{href:"/conversations",children:"Check out the Conversations endpoint"})}),"\n",(0,e.jsx)(s.li,{children:(0,e.jsx)(s.a,{href:"/errors",children:"Learn about the different error messages in Protocol"})}),"\n"]})]})}var r=!0;function i(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,e.jsx)(s,Object.assign({},n,{children:(0,e.jsx)(t,n)})):t(n)}}},function(n){n.O(0,[774,888,179],function(){return n(n.s=4719)}),_N_E=n.O()}]);