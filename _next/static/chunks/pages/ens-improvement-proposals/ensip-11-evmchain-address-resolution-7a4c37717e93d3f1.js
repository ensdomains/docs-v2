(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5720],{5801:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/ens-improvement-proposals/ensip-11-evmchain-address-resolution",function(){return r(6106)}])},6106:function(e,n,r){"use strict";r.r(n);var i=r(4637),t=r(6988),o=r(1177),s=r(2370),a=function(e){return(0,o.withSSG)((0,t.Z)({filename:"ensip-11-evmchain-address-resolution.mdx",route:"/ens-improvement-proposals/ensip-11-evmchain-address-resolution",meta:{description:"Introduces coinType for EVM compatible chains (amending ENSIP9)."},pageMap:[{name:"README",route:"/README"},{name:"SUMMARY",route:"/SUMMARY"},{name:"bug-bounty-program",route:"/bug-bounty-program"},{name:"contract-api-reference",children:[{name:"ENS-Contracts-Overview",route:"/contract-api-reference/ENS-Contracts-Overview"},{name:"dns-registrar",route:"/contract-api-reference/dns-registrar"},{name:"ens",route:"/contract-api-reference/ens",frontMatter:{description:"The ENS registry."}},{name:"eth-permanent-registrar",children:[{name:"README",route:"/contract-api-reference/eth-permanent-registrar/README"},{name:"controller",route:"/contract-api-reference/eth-permanent-registrar/controller"},{name:"registrar",route:"/contract-api-reference/eth-permanent-registrar/registrar"}],route:"/contract-api-reference/eth-permanent-registrar"},{name:"name-processing",route:"/contract-api-reference/name-processing",frontMatter:{description:"Describes how to normalize and hash ENS names."}},{name:"publicresolver",route:"/contract-api-reference/publicresolver",frontMatter:{description:"The default public resolver."}},{name:"reverseregistrar",route:"/contract-api-reference/reverseregistrar",frontMatter:{description:"The registrar responsible for managing reverse resolution via the .addr.reverse special-purpose TLD."}},{name:"testregistrar",route:"/contract-api-reference/testregistrar"}],route:"/contract-api-reference"},{name:"contract-developer-guide",children:[{name:"resolving-names-on-chain",route:"/contract-developer-guide/resolving-names-on-chain"},{name:"writing-a-registrar",route:"/contract-developer-guide/writing-a-registrar"},{name:"writing-a-resolver",route:"/contract-developer-guide/writing-a-resolver"}],route:"/contract-developer-guide"},{name:"dapp-developer-guide",children:[{name:"ens-as-nft",route:"/dapp-developer-guide/ens-as-nft"},{name:"ens-enabling-your-dapp",route:"/dapp-developer-guide/ens-enabling-your-dapp"},{name:"ens-l2-offchain",route:"/dapp-developer-guide/ens-l2-offchain"},{name:"ens-libraries",route:"/dapp-developer-guide/ens-libraries"},{name:"front-end-design-guidelines",route:"/dapp-developer-guide/front-end-design-guidelines",frontMatter:{description:"ENS is a tool to simplify the experience for your users. Here are a series of guidelines and tools that will help you make design choices and implement the best ENS user experience."}},{name:"managing-names",route:"/dapp-developer-guide/managing-names"},{name:"registering-and-renewing-names",route:"/dapp-developer-guide/registering-and-renewing-names"},{name:"resolving-names",route:"/dapp-developer-guide/resolving-names"},{name:"working-with-ens",route:"/dapp-developer-guide/working-with-ens"}],route:"/dapp-developer-guide"},{name:"deploying-ens-on-a-private-chain",route:"/deploying-ens-on-a-private-chain"},{name:"developer",children:[{name:"index",route:"/developer"},{name:"meta.json",meta:{index:{title:"Developer Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/developer"},{name:"dns-registrar-guide",route:"/dns-registrar-guide"},{name:"ens-deployments",route:"/ens-deployments"},{name:"ens-improvement-proposals",children:[{name:"README",route:"/ens-improvement-proposals/README",frontMatter:{description:"Standards documentation describing the ENS protocol"}},{name:"ensip-1-ens",route:"/ens-improvement-proposals/ensip-1-ens",frontMatter:{description:"Documentation of the basic ENS protocol (formerly EIP-137)."}},{name:"ensip-10-wildcard-resolution",route:"/ens-improvement-proposals/ensip-10-wildcard-resolution",frontMatter:{description:"Provides a mechanism to support wildcard resolution of ENS names (formerly EIP-2544)."}},{name:"ensip-11-evmchain-address-resolution",route:"/ens-improvement-proposals/ensip-11-evmchain-address-resolution",frontMatter:{description:"Introduces coinType for EVM compatible chains (amending ENSIP9)."}},{name:"ensip-12-avatar-text-records",route:"/ens-improvement-proposals/ensip-12-avatar-text-records",frontMatter:{description:"A standard for storage of the avatar text record in ENS."}},{name:"ensip-2-initial-hash-registrar",route:"/ens-improvement-proposals/ensip-2-initial-hash-registrar",frontMatter:{description:"Describes the hash registrar initially used to register ENS .eth domains (formerly EIP-162)."}},{name:"ensip-3-reverse-resolution",route:"/ens-improvement-proposals/ensip-3-reverse-resolution",frontMatter:{description:"Specifies a TLD, registrar, and resolver interface for reverse resolution of Ethereum addresses using ENS (formerly EIP-181)."}},{name:"ensip-4-support-for-contract-abis",route:"/ens-improvement-proposals/ensip-4-support-for-contract-abis",frontMatter:{description:"A mechanism for storing ABI definitions in ENS, for easy lookup of contract interfaces by callers (formerly EIP-205)."}},{name:"ensip-5-text-records",route:"/ens-improvement-proposals/ensip-5-text-records",frontMatter:{description:"A standard for storage of text records in ENS (formerly EIP-634)."}},{name:"ensip-6-dns-in-ens",route:"/ens-improvement-proposals/ensip-6-dns-in-ens",frontMatter:{description:"Defines a resolver profile for ENS that provides features for storage and lookup of DNS records (formerly EIP-1185)."}},{name:"ensip-7-contenthash-field",route:"/ens-improvement-proposals/ensip-7-contenthash-field",frontMatter:{description:"Introduces a field for storing content addresses and hashes in ENS (formerly EIP-1577)."}},{name:"ensip-8-interface-discovery",route:"/ens-improvement-proposals/ensip-8-interface-discovery",frontMatter:{description:"Defines a method of associating contract interfaces with ENS names and addresses, and of discovering those interfaces (formerly EIP-1844)."}},{name:"ensip-9-multichain-address-resolution",route:"/ens-improvement-proposals/ensip-9-multichain-address-resolution",frontMatter:{description:"Introduces new overloads for the `addr` field for ENS resolvers, which permit resolution of addresses for other blockchains via ENS (formerly EIP-2304)."}}],route:"/ens-improvement-proposals"},{name:"ens-migration-february-2020",children:[{name:"guide-for-dapp-developers",route:"/ens-migration-february-2020/guide-for-dapp-developers"},{name:"technical-description",route:"/ens-migration-february-2020/technical-description"}],route:"/ens-migration-february-2020"},{name:"frequently-asked-questions",route:"/frequently-asked-questions"},{name:"governance",children:[{name:"index",route:"/governance"},{name:"meta.json",meta:{index:{title:"Governance Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/governance"},{name:"index",route:"/",frontMatter:{title:"Welcome"}},{name:"meta.json",meta:{index:{title:"Introduction",type:"docs",hidden:!0,theme:{}},governance:{title:"Governance",type:"nav"},user:{title:"User",type:"nav"},developer:{title:"Developer",type:"nav"},technical:{title:"Technical",type:"nav"}},locale:"en-US"},{name:"permanent-registrar-faq",route:"/permanent-registrar-faq"},{name:"technical",children:[{name:"index",route:"/technical"},{name:"meta.json",meta:{index:{title:"Technical Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/technical"},{name:"terminology",route:"/terminology"},{name:"user",children:[{name:"index",route:"/user"},{name:"meta.json",meta:{index:{title:"User Documentation",type:"docs",theme:{}}},locale:"en-US"}],route:"/user"}]},s.Z))(e)};function c(e){var n=Object.assign({h1:"h1",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",h3:"h3",p:"p",a:"a",code:"code",pre:"pre",h4:"h4",ul:"ul",li:"li"},e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"ENSIP-11: EVM compatible Chain Address Resolution"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Author"})}),(0,i.jsxs)(n.th,{children:["Makoto Inoue ","<makoto@ens.domains>"]})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Status"})}),(0,i.jsx)(n.td,{children:"Draft"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Submitted"})}),(0,i.jsx)(n.td,{children:"2022-01-13"})]})]})]}),"\n",(0,i.jsx)(n.h3,{children:"Abstract"}),"\n",(0,i.jsxs)(n.p,{children:["This ENSIP extends ",(0,i.jsx)(n.a,{href:"ensip-9-multichain-address-resolution.md",children:"ENSIP 9 (multichain address resolution)"}),", dedicates a range of coin types for EVM compatible chains, and specifies a way to derive EVM chain IDs to the designated coin types."]}),"\n",(0,i.jsx)(n.p,{children:"The dedicated range uses over 0x80000000 (2147483648) which is reserved under ENSIP 9 so there will be no possibility of coin type collision with other non EVM coin types to be added in future. However, some of coin types previously allocated to EVM chain ides will be deprecated."}),"\n",(0,i.jsx)(n.h3,{children:"Motivation"}),"\n",(0,i.jsxs)(n.p,{children:["The existing ENSIP 9 relies on the existence of coin types on ",(0,i.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"SLIP44"})," which was designed to define address encoding type for deterministic wallets. As the majority of EVM compatible chains inherit the same encoding type as Ethereum, it is redundant to keep requesting the addition of EVM compatible chains into SLIP 44. This specification standardises a way to derive coinType based on ",(0,i.jsx)(n.a,{href:"https://chainlist.org",children:"Chain ID"}),"."]}),"\n",(0,i.jsx)(n.h3,{children:"Specification"}),"\n",(0,i.jsx)(n.p,{children:"This specification amends ENSIP 9 to specify that coin types with the most-significant bit set are to be treated as EVM chain IDs. The MSB is reserved in SLIP44 for other purposes relating to HD wallet key derivation, so no coin types exist in this range."}),"\n",(0,i.jsxs)(n.p,{children:["To compute the new coin type for EVM chains, bitwise-OR the chain ID with ",(0,i.jsx)(n.code,{children:"0x80000000"}),": ",(0,i.jsx)(n.code,{children:"0x80000000 | chainId"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const convertEVMChainIdToCoinType = (chainId: number) =>{\n  return  (0x80000000 | chainId) >>> 0\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And to reverse the operation, bitwise-AND the cointType with ",(0,i.jsx)(n.code,{children:"0x7fffffff"}),": ",(0,i.jsx)(n.code,{children:"0x7fffffff & coinType"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const convertCoinTypeToEVMChainId = (coinType: number) =>{\n  return  (0x7fffffff & coinType) >> 0\n}\n"})}),"\n",(0,i.jsx)(n.h4,{children:"Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["An implementation of this interface is provided in the ",(0,i.jsx)(n.a,{href:"https://github.com/ensdomains/address-encoder/",children:"ensdomains/address-encoder"})," repository."]}),"\n",(0,i.jsx)(n.h4,{children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["To compute the new coin type for EVM chains, call ",(0,i.jsx)(n.code,{children:"convertEVMChainIdToCoinType(chainId)"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const encoder = require('@ensdomains/address-encoder')\n>  encoder.convertEVMChainIdToCoinType(61)\n2147483709\n> encoder.convertCoinTypeToEVMChainId(2147483709)\n61\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also use existing functions formatsByName and formatsByCoinType to derive these chain IDs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"> encoder.formatsByName['XDAI']\n{\n coinType: 2147483748,\n decoder: [Function (anonymous)],\n encoder: [Function (anonymous)],\n name: 'XDAI'\n}\n> encoder.formatsByCoinType[2147483748]\n{\n coinType: 2147483748,\n decoder: [Function (anonymous)],\n encoder: [Function (anonymous)],\n name: 'XDAI'\n}\n"})}),"\n",(0,i.jsx)(n.h4,{children:"Exceptions"}),"\n",(0,i.jsx)(n.p,{children:"The following EVM chains are the exception to this standard."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"AVAX = AVAX has multiple chain address formats, and only c chain is EVM compatible"}),"\n",(0,i.jsx)(n.li,{children:"RSK = RSK has its own additional validation"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"They will continue using coinType defined at SLIP44"}),"\n",(0,i.jsx)(n.h4,{children:"Backwards Compatibility"}),"\n",(0,i.jsx)(n.p,{children:"The following EVM compatible cointypes existed before introducing this new standard."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"NRG"}),"\n",(0,i.jsx)(n.li,{children:"POA"}),"\n",(0,i.jsx)(n.li,{children:"TT"}),"\n",(0,i.jsx)(n.li,{children:"CELO"}),"\n",(0,i.jsx)(n.li,{children:"CLO"}),"\n",(0,i.jsx)(n.li,{children:"TOMO"}),"\n",(0,i.jsx)(n.li,{children:"EWT"}),"\n",(0,i.jsx)(n.li,{children:"THETA"}),"\n",(0,i.jsx)(n.li,{children:"GO"}),"\n",(0,i.jsx)(n.li,{children:"FTM"}),"\n",(0,i.jsx)(n.li,{children:"XDAI"}),"\n",(0,i.jsx)(n.li,{children:"ETC"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When you display them for backward compatibility purposes, append ",(0,i.jsx)(n.code,{children:"_LEGACY"})," to the cointype and make them read only."]}),"\n",(0,i.jsx)(n.h3,{children:"Copyright"}),"\n",(0,i.jsxs)(n.p,{children:["Copyright and related rights waived via ",(0,i.jsx)(n.a,{href:"https://creativecommons.org/publicdomain/zero/1.0/",children:"CC0"}),"."]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.jsx)(a,Object.assign({},e,{children:(0,i.jsx)(c,e)}))}}},function(e){e.O(0,[8164,3248,9774,2888,179],(function(){return n=5801,e(e.s=n);var n}));var n=e.O();_N_E=n}]);