(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5010],{7395:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/glossary",function(){return r(8346)}])},8346:function(e,n,r){"use strict";r.r(n),r.d(n,{__N_SSG:function(){return a}});var i=r(1527),s=r(313);function t(e){let n=Object.assign({h1:"h1",ul:"ul",li:"li",em:"em"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Glossary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Controller"}),": The account that may edit the records of a name. The Controller may be changed by the Registrant or Controller."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Label"}),": An individual component of a name, such as 'alice'."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Labelhash"}),": The keccak256 hash of an individual label."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Name"}),": An ENS identifier such as 'alice.eth'. Names may consist of multiple parts, called labels, separated by dots."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Namehash"}),": The algorithm used to process an ENS name and return a cryptographic hash uniquely identifying that name. Namehash takes a name as input and produces a ",(0,i.jsx)(n.em,{children:"node"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Node"}),": A cryptographic hash uniquely identifying a name."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Owner"}),": The owner of a name is the entity referenced in the ENS registry's owner field. An owner may transfer ownership, set a resolver or TTL, and create or reassign subdomains."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Registrar"}),": A registrar is a contract responsible for allocating subdomains. Registrars can be configured at any level of ENS, and are pointed to by the owner field of the registry."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Registration"}),": A registration is a registrar's record of a user's ownership of a name. This is distinct from the owner field in the Registry; registrations are maintained in the registrar contract and additionally store information on expiry date, fees paid, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Registrant"}),": The owner of a registration. The registrant may transfer the registration, set the Controller, and reclaim ownership of the name in the registry if required."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Registry"}),": The core contract of ENS, the registry maintains a mapping from domain name (at any level - x, y.x, z.y.x etc) to owner, resolver, and time-to-live."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Resolver"}),": A resolver is a contract that maps from name to the resource (e.g., cryptocurrency addresses, content hash, etc). Resolvers are pointed to by the resolver field of the registry."]}),"\n"]})]})}var a=!0;n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(t,e)})):t(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=7395)}),_N_E=e.O()}]);